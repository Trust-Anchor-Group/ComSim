<?xml version="1.0" encoding="utf-8"?>
<Model xmlns="http://trustanchorgroup.com/Schema/ComSim.xsd"
       xmlns:xmpp="http://trustanchorgroup.com/Schema/ComSim/XMPP.xsd"
       xmlns:mqtt="http://trustanchorgroup.com/Schema/ComSim/MQTT.xsd"
       xmlns:perf="http://trustanchorgroup.com/Schema/ComSim/ComSimPerformance.xsd"
       timeBase="StartOfSimulation"
       bucketTime="PT1S"
       timeUnit="PT1S"
       timeCycle="PT1M"
       duration="PT1M">
  <Meta>
    <Title>Protocols</Title>
    <Introduction>Simulates M2M messages being sent between clients using different protocols. Machine and Service performance is measured and compared.</Introduction>
    <Description>
      <![CDATA[ 
      Simulates 100 XMPP clients, 100 (unencrypted, unauthorized) MQTT clients and 100 MQ clients exchanging XML messages randomly between 
      each other (users of the same protocol) during 10 minutes, at a total frequency of 10'000 messages per minute per protocol. During the
      simulation, performance metrics are sampled for local simulator performance, broker performance, and for the individiual protocol 
      service performances.
      ]]>
    </Description>
    <Preparation>
      <![CDATA[
      XMPP
      ------

      The XMPP Client accounts are created automatically, if the broker being used supports 
      [XEP-0077: In-Band Registration](https://xmpp.org/extensions/xep-0077.html). The 
      account registration process can be protected using keys and secrets, if the broker supports
      [XEP-0348: Signing Forms](https://xmpp.org/extensions/xep-0348.html).
      
      MQTT
      ------
      
      The MQTT protocol is tested by installing the [mosquitto](https://mosquitto.org/download/) MQTT 
      broker on the same machine as the XMPP broker. It is important the brokers reside on the same
      machine, so network performance metrics can be compared.
      
      MQ
      ------
      
      The [IBM MQ Server](https://developer.ibm.com/components/ibm-mq/articles/mq-downloads) also needs
      to be installed on the same machine as the XMPP broker, to make metrics comparable. There are
      [tutorials](https://developer.ibm.com/components/ibm-mq/tutorials/mq-connect-app-queue-manager-windows/)
      on how to setup an IBM MQ server properly on Windows.
      
      **Note**: The script setting up the IBM MQ Server described in the tutorial mentioned above, has been
      modified, and is available in the Examples folder under then name `mq-dev-config.mqsc`. It does the same
      things as the script in the tutorial, except it adds an additional 100 queues to be used for the simulation.
      
      MQ authentication of clients is done against local machine users (or AD users). You will therefore need
      to create user accounts on the local machine (or the Active Directory). To generate a `CSV` file with
      user names and random passwords, you can use the following script:
      
          N:=100;
          i:=1..N;
          UserName:="SimUser"+i;
          Password:=[foreach n in i do Base64Encode(RandomBytes(24))];
          M:=[join("UserName",UserName),join("Password",Password)]T;
          SaveFile(M,"Users.csv")

      Once the `CSV` file has been generated, you can create user accounts matching user
      accounts on the server hosting the IBM MQ service using the following Power Shell script:
      
          $Users = Import-csv Users.csv
          
          foreach ($User in $Users)
          {
          	$UserName = $User.UserName
          	$Password = $User.Password
          	
          	if (!(Get-LocalUser -Name $UserName))
          	{
          		New-LocalUser -AccountNeverExpires -Name $UserName -Password (convertto-securestring $Password -AsPlainText -Force) -PasswordNeverExpires
          	}
          	
          	Add-LocalGroupMember -Group mqclient -Member $UserName
          }
      
      **Note**: The above script assume you have setup the MQ broker using the tutorial mentioned
      above. This tutorial provides authorization to queues based on membership in the local `mqclient`
      group. More detailed authorization schemes are possible. You need to adapt the script accordingly.
      
      Performance Counters
      ------------------------
      
      For this simulation to work, the `ProtocolPerformance.ws` Web Service script available in the
      [Examples](https://github.com/Trust-Anchor-Group/ComSim/tree/master/Examples) folder in the
      [ComSim](https://github.com/Trust-Anchor-Group/ComSim) project, needs to be copied to the
      `/Reports` web folder of the [TAG Neuron](https://lab.tagroot.io/Broker.md) or the
      [IoT Gateway](https://waher.se/IoTGateway/Index.md) web server. For readability, the web service
      script contais the following script, executed when the resource is accessed:

          {
              "cpuPercent":PerformanceCounters.GetCounter("Processor","_Total","% Processor Time").NextValue(),
              "networkBytesPerSec":PerformanceCounters.GetCounter("Network Interface","Microsoft Hyper-V Network Adapter","Bytes Total/sec").NextValue(),
              "memoryMBytesFree":PerformanceCounters.GetCounter("Memory","Available MBytes").NextValue(),
              "xmppCpu":PerformanceCounters.GetCounter("Process","Waher.IoTGateway.Svc","% Processor Time").NextValue(),
              "mqttCpu":PerformanceCounters.GetCounter("Process","mosquitto","% Processor Time").NextValue(),
              "mqCpu":PerformanceCounters.GetCounter("Process","runmqlsr","% Processor Time").NextValue()+
              	PerformanceCounters.GetCounter("Process","amqsvc","% Processor Time").NextValue(),
              "xmppMemory":PerformanceCounters.GetCounter("Process","Waher.IoTGateway.Svc","Working Set - Private").NextValue(),
              "mqttMemory":PerformanceCounters.GetCounter("Process","mosquitto","Working Set - Private").NextValue(),
              "mqMemory":PerformanceCounters.GetCounter("Process","runmqlsr","Working Set - Private").NextValue()+
              	PerformanceCounters.GetCounter("Process","amqsvc","Working Set - Private").NextValue(),
              "xmppIo":PerformanceCounters.GetCounter("Process","Waher.IoTGateway.Svc","IO Data Bytes/sec").NextValue(),
              "mqttIo":PerformanceCounters.GetCounter("Process","mosquitto","IO Data Bytes/sec").NextValue(),
              "mqIo":PerformanceCounters.GetCounter("Process","runmqlsr","IO Data Bytes/sec").NextValue()+
              	PerformanceCounters.GetCounter("Process","amqsvc","IO Data Bytes/sec").NextValue()
          }
      ]]>
    </Preparation>
    <ModelScript>
      <![CDATA[
      GetPerformance():=Post("https://lab.tagroot.io/Reports/ProtocolPerformance.ws","","application/json");
      ]]>
    </ModelScript>
  </Meta>
  <Assemblies>
    <Assembly fileName="TAG.Simulator.MQ.dll"/>
    <Assembly fileName="TAG.Simulator.MQTT.dll"/>
    <Assembly fileName="TAG.Simulator.Performance.dll"/>
    <Assembly fileName="TAG.Simulator.XMPP.dll"/>
  </Assemblies>
  <Actors>
    <Timer id="PerformanceTimer" N="1" period="PT1S">
      <ExternalEvent name="Elapsed" event="MeasurePerformance"/>
    </Timer>
    <xmpp:XmppActorTcp domain="lab.tagroot.io" userName="XmppTcp" id="XmppTcp" N="100" apiKey="LabApiKey1" secret="LabSecret1" alwaysConnected="true">
      <xmpp:MessageHandler name="Msg" namespace="https://lab.tagroot.io/Examples/XmlMessages.xsd" event="XmppMessageReceived" actorName="To" eventArgs="e"/>
    </xmpp:XmppActorTcp>
    <mqtt:MqttActorTcp domain="lab.tagroot.io" userName="MqttTcp" id="MqttTcp" N="100" encrypted="false" port="1883" trustServer="true">
      <mqtt:Subscribe topic="Msg/{InstanceId}" qos="AtMostOnce"/>
      <ExternalEvent name="OnContentReceived" event="MqttMessageReceived" actorName="To">
        <Parameter name="Content" variable="Content"/>
      </ExternalEvent>
    </mqtt:MqttActorTcp>
  </Actors>
  <Distributions>
    <Uniform id="TenThousandPerMinute" from="0" to="60" N="10000"/>
  </Distributions>
  <Events>
    <StochasticEvent distribution="TenThousandPerMinute" activity="SendXmppMessage">
      <Description>Sends an XML message from one random XMPP client to another, at a frequency of a thousand times per minute using a uniform distribution.</Description>
      <ActorReference name="From" exclusive="true">
        <FromPopulation actor="XmppTcp"/>
      </ActorReference>
      <ActorReference name="To" exclusive="false">
        <FromPopulation actor="XmppTcp"/>
      </ActorReference>
      <SetVariable name="StartTime">
        <Script>Now</Script>
      </SetVariable>
    </StochasticEvent>
    <StochasticEvent distribution="TenThousandPerMinute" activity="SendMqttMessage">
      <Description>Sends an XML message from one random MQTT client to another, at a frequency of a thousand times per minute using a uniform distribution.</Description>
      <ActorReference name="From" exclusive="true">
        <FromPopulation actor="MqttTcp"/>
      </ActorReference>
      <ActorReference name="To" exclusive="false">
        <FromPopulation actor="MqttTcp"/>
      </ActorReference>
      <SetVariable name="StartTime">
        <Script>Now</Script>
      </SetVariable>
    </StochasticEvent>
    <EventHandler id="XmppMessageReceived" activity="ProcessXmppMessage">
      <Description>Event triggered when an XMPP message has been received.</Description>
    </EventHandler>
    <EventHandler id="MqttMessageReceived" activity="ProcessMqttMessage">
      <Description>Event triggered when an MQTT message has been received.</Description>
    </EventHandler>
    <EventHandler id="MeasurePerformance" activity="ReadPerformanceCounters">
      <Description>Server performance is measured regularly during the simulation, and shown in the final report.</Description>
    </EventHandler>
  </Events>
  <Activities>
    <Activity id="ReadPerformanceCounters">
      <Description>This activity measures server performance, by calling a web service and reporting the measured values in the returning JSON object back to the simulator.</Description>
      <Start/>
      <Parallel>
        <Thread>
          <Eval>M:=GetPerformance()</Eval>
          <Group title="Broker Performance">
            <Sample name="Broker CPU (%)">
              <Script>M.cpuPercent</Script>
            </Sample>
            <Sample name="Broker Network (kB/s)">
              <Script>M.networkBytesPerSec/1024</Script>
            </Sample>
            <Sample name="Broker Free Memory (GB)">
              <Script>M.memoryMBytesFree/1024</Script>
            </Sample>
          </Group>
          <Group title="XMPP Performance">
            <Sample name="XMPP CPU (%)">
              <Script>M.xmppCpu</Script>
            </Sample>
            <Sample name="XMPP I/O (kB/s)">
              <Script>M.xmppIo/1024</Script>
            </Sample>
            <Sample name="XMPP Memory Usage (MB)">
              <Script>M.xmppMemory/1048576</Script>
            </Sample>
          </Group>
          <Group title="MQTT Performance">
            <Sample name="MQTT CPU (%)">
              <Script>M.mqttCpu</Script>
            </Sample>
            <Sample name="MQTT I/O (kB/s)">
              <Script>M.mqttIo/1024</Script>
            </Sample>
            <Sample name="MQTT Memory Usage (MB)">
              <Script>M.mqttMemory/1048576</Script>
            </Sample>
          </Group>
          <Group title="MQ Performance">
            <Sample name="MQ CPU (%)">
              <Script>M.mqCpu</Script>
            </Sample>
            <Sample name="MQ I/O (kB/s)">
              <Script>M.mqIo/1024</Script>
            </Sample>
            <Sample name="MQ Memory Usage (MB)">
              <Script>M.mqMemory/1048576</Script>
            </Sample>
          </Group>
        </Thread>
        <Thread>
          <Group title="Performance at Simulator Machine">
            <!-- NOTE: Performance counter names, instance names and category names depends on configuration and locale of operating system of the machine running the simulator. Might have to be changed. -->
            <Sample name="Simulator CPU (%)">
              <!-- Swedish: -->
              <perf:Performance category="Processor" instance="_Total" counter="% Processor Time"/>
              <!-- English:
                 <perf:Performance category="Processor" instance="_Total" counter="% Processor Time"/> -->
            </Sample>
            <Sample name="Simulator Network (kB/s)">
              <!-- Swedish: -->
              <perf:Performance category="Nätverksgränssnitt" instance="Intel[R] Wireless-AC 9560 160MHz" counter="Totalt antal byte/s" divider="1024"/>
              <!-- English:
                 <perf:Performance category="Network Interface" instance="Microsoft Hyper-V Network Adapter" counter="Bytes Total/sec" divider="1024"/> -->
            </Sample>
            <Sample name="Simulator Free Memory (GB)">
              <!-- Swedish: -->
              <perf:Performance category="Minne" counter="Tillgängliga megabyte" divider="1024"/>
              <!-- English:
                 <perf:Performance category="Memory" counter="Available MBytes" divider="1024"/>-->
            </Sample>
          </Group>
        </Thread>
      </Parallel>
      <Stop/>
    </Activity>
    <Activity id="SendXmppMessage" logStart="false" logEnd="false">
      <Description>This activity sends an XML message to a random XMPP recipient.</Description>
      <Start/>
      <xmpp:SendMessage actor="From" to="{To.FullJID}">
        <Xml>
          <Msg xmlns="https://lab.tagroot.io/Examples/XmlMessages.xsd">
            <StartTime>{StartTime.ToString("yyyy-MM-ddTHH:mm:ss.ffffff")}</StartTime>
          </Msg>
        </Xml>
      </xmpp:SendMessage>
      <Count counter="XmppSent"/>
      <Stop/>
    </Activity>
    <Activity id="SendMqttMessage" logStart="false" logEnd="false">
      <Description>This activity sends an XML message to a random MQTT recipient.</Description>
      <Start/>
      <mqtt:Publish actor="From" topic="Msg/{To.InstanceId}" qos="AtMostOnce">
        <Xml>
          <Msg xmlns="https://lab.tagroot.io/Examples/XmlMessages.xsd">
            <StartTime>{StartTime.ToString("yyyy-MM-ddTHH:mm:ss.ffffff")}</StartTime>
          </Msg>
        </Xml>
      </mqtt:Publish>
      <Count counter="MqttSent"/>
      <Stop/>
    </Activity>
    <Activity id="ProcessXmppMessage" logStart="false" logEnd="false">
      <Description>Processes a received XMPP message.</Description>
      <Start/>
      <Count counter="XmppReceived"/>
      <Eval>
        <![CDATA[
          StartTime:=DateTime(e.Content["StartTime"].InnerText);
          Elapsed:=Now.Subtract(StartTime).TotalMilliseconds
        ]]>
      </Eval>
      <Sample name="XMPP Roundtrip">
        <Script>Elapsed ms</Script>
      </Sample>
      <Stop/>
    </Activity>
    <Activity id="ProcessMqttMessage" logStart="false" logEnd="false">
      <Description>Processes a received MQTT message.</Description>
      <Start/>
      <Count counter="MqttReceived"/>
      <Conditional>
        <Try condition="Msg:=Decode(Content.Data,'text/xml').DocumentElement">
          <Eval>
            <![CDATA[
              StartTime:=DateTime(Msg["StartTime"].InnerText);
              Elapsed:=Now.Subtract(StartTime).TotalMilliseconds
            ]]>
          </Eval>
          <Sample name="MQTT Roundtrip">
            <Script>Elapsed ms</Script>
          </Sample>
        </Try>
        <Otherwise>
          <Eval>
            <![CDATA[
            LogError("Non-XML message received: "+Base64Encode(Content.Data),
              {"Object":To.UserName});
            ]]>
          </Eval>
          <Count counter="MqttContentError"/>
        </Otherwise>
      </Conditional>
      <Stop/>
    </Activity>
  </Activities>
  <Graphs>
    <CombinedExecutionsGraph title="Nr Messages sent" legend="true" header="Send messages">
      <Source ref="SendXmppMessage"/>
      <Source ref="SendMqttMessage"/>
    </CombinedExecutionsGraph>
    <CombinedExecutionTimeGraph title="Time sending Messages" legend="false">
      <Source ref="SendXmppMessage"/>
      <Source ref="SendMqttMessage"/>
    </CombinedExecutionTimeGraph>
    <CombinedExecutionsGraph title="Nr Messages processed" legend="true" header="Received messages">
      <Source ref="ProcessXmppMessage"/>
      <Source ref="ProcessMqttMessage"/>
    </CombinedExecutionsGraph>
    <CombinedExecutionTimeGraph title="Time processing Messages" legend="false">
      <Source ref="ProcessXmppMessage"/>
      <Source ref="ProcessMqttMessage"/>
    </CombinedExecutionTimeGraph>
    <CombinedSampleGraph title="Message roundtrip" legend="true" header="Performance">
      <Source ref="XMPP Roundtrip"/>
      <Source ref="MQTT Roundtrip"/>
    </CombinedSampleGraph>
    <CombinedSampleGraph title="Machine CPU %" legend="true" header="CPU Performance">
      <Source ref="Broker CPU (%)"/>
      <Source ref="Simulator CPU (%)"/>
    </CombinedSampleGraph>
    <CombinedSampleGraph title="Service CPU %" legend="true">
      <Source ref="XMPP CPU (%)"/>
      <Source ref="MQTT CPU (%)"/>
      <Source ref="MQ CPU (%)"/>
    </CombinedSampleGraph>
    <CombinedSampleGraph title="Used Memory (MB)" legend="true" header="Memory Performance">
      <Source ref="XMPP Memory Usage (MB)"/>
      <Source ref="MQTT Memory Usage (MB)"/>
      <Source ref="MQ Memory Usage (MB)"/>
    </CombinedSampleGraph>
    <CombinedSampleGraph title="Machine Input/Output (kB/s)" legend="true" header="I/O Performance">
      <Source ref="Broker Network (kB/s)"/>
      <Source ref="Simulator Network (kB/s)"/>
    </CombinedSampleGraph>
    <CombinedSampleGraph title="Service Input/Output (kB/s)" legend="true">
      <Source ref="XMPP I/O (kB/s)"/>
      <Source ref="MQTT I/O (kB/s)"/>
      <Source ref="MQ I/O (kB/s)"/>
    </CombinedSampleGraph>
  </Graphs>
</Model>