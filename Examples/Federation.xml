<?xml version="1.0" encoding="utf-8"?>
<Model xmlns="http://trustanchorgroup.com/Schema/ComSim.xsd"
       xmlns:xmpp="http://trustanchorgroup.com/Schema/ComSim/XMPP.xsd"
       xmlns:perf="http://trustanchorgroup.com/Schema/ComSim/ComSimPerformance.xsd"
       timeBase="StartOfSimulation"
       bucketTime="PT1S"
       timeUnit="PT1S"
       timeCycle="PT10M"
       duration="PT10M">
  <Meta>
    <Title>Federation</Title>
    <Introduction>Demonstrates how to send and receive messages between clients connected to different federated brokers.</Introduction>
    <Description>
      <![CDATA[ 
      Simulates 200 XMPP clients, 100 connected to one broker in the Netherlands, 100 connected to a second broker in Sweden. Clients
      exchange XML messages randomly between each other during 10 minutes, normally distributed, with a total of about two million,
      half local, half federated.
      
      During the simulation, performance metrics are sampled for local simulator performance, as well as both broker performances. 
      Automatic outlier removal has been used on the message roundtrip measurements to make results easier to read and less
      dependent on external network and operating system events. A window averaging of the last 15 samples in the message roundtrip 
      series have also been used to smoothen curves, to make the average easier to follow over time.
      ]]>
    </Description>
    <Preparation>
      <![CDATA[
      XMPP
      ------

      The XMPP Client accounts are created automatically, if the broker being used supports 
      [XEP-0077: In-Band Registration](https://xmpp.org/extensions/xep-0077.html). The 
      account registration process can be protected using keys and secrets, if the broker supports
      [XEP-0348: Signing Forms](https://xmpp.org/extensions/xep-0348.html).
      
      Performance Counters
      ------------------------
      
      For this simulation to work, the `Performance.ws` Web Service script available in the
      [Examples](https://github.com/Trust-Anchor-Group/ComSim/tree/master/Examples) folder in the
      [ComSim](https://github.com/Trust-Anchor-Group/ComSim) project, needs to be copied to the
      `/Reports` web folder of the [TAG Neuron](https://lab.tagroot.io/Broker.md) or the
      [IoT Gateway](https://waher.se/IoTGateway/Index.md) web server. For readability, the web service
      script contais the following script, executed when the resource is accessed:

          {
              "cpuPercent":PerformanceCounters.GetCounter("Processor","_Total","% Processor Time").NextValue(),
              "networkBytesPerSec":PerformanceCounters.GetCounter("Network Interface","Microsoft Hyper-V Network Adapter","Bytes Total/sec").NextValue(),
              "memoryMBytesFree":PerformanceCounters.GetCounter("Memory","Available MBytes").NextValue()
          }
      ]]>
    </Preparation>
    <ModelScript>
      <![CDATA[
      GetBrokerPerformance(Host):=Post("https://"+Host+"/Reports/Performance.ws","","application/json");
      ]]>
    </ModelScript>
  </Meta>
  <Assemblies>
    <Assembly fileName="TAG.Simulator.Performance.dll"/>
    <Assembly fileName="TAG.Simulator.XMPP.dll"/>
  </Assemblies>
  <Actors>
    <Timer id="PerformanceTimer" N="1" period="PT1S">
      <ExternalEvent name="Elapsed" event="MeasurePerformance"/>
    </Timer>
    <xmpp:XmppActorTcp domain="lab.tagroot.io" userName="XmppTcp" id="XmppTcpNl" N="100" apiKey="LabApiKey1" secret="LabSecret1" alwaysConnected="true">
      <xmpp:MessageHandler name="Loc" namespace="https://lab.tagroot.io/Examples/XmlMessages.xsd" event="XmppLocalMessageReceived" actorName="To" eventArgs="e"/>
      <xmpp:MessageHandler name="Fed" namespace="https://lab.tagroot.io/Examples/XmlMessages.xsd" event="XmppFederatedMessageReceived" actorName="To" eventArgs="e"/>
    </xmpp:XmppActorTcp>
    <xmpp:XmppActorTcp domain="cybercity.online" userName="XmppTcp" id="XmppTcpSe" N="100" apiKey="LabApiKey2" secret="LabSecret2" alwaysConnected="true">
      <xmpp:MessageHandler name="Loc" namespace="https://lab.tagroot.io/Examples/XmlMessages.xsd" event="XmppLocalMessageReceived" actorName="To" eventArgs="e"/>
      <xmpp:MessageHandler name="Fed" namespace="https://lab.tagroot.io/Examples/XmlMessages.xsd" event="XmppFederatedMessageReceived" actorName="To" eventArgs="e"/>
    </xmpp:XmppActorTcp>
  </Actors>
  <Distributions>
    <Normal id="FirstHalfLocal" μ="200" σ="75" N="500000"/>
    <Normal id="SecondHalfLocal" μ="200" σ="75" N="500000"/>
    <Normal id="FirstHalfFederated" μ="400" σ="75" N="500000"/>
    <Normal id="SecondHalfFederated" μ="400" σ="75" N="500000"/>
  </Distributions>
  <Events>
    <StochasticEvent distribution="FirstHalfLocal" activity="SendLocalXmppMessage">
      <Description>Sends an XML message from one random XMPP client to another, both connected to the broker in the Netherlands.</Description>
      <ActorReference name="From" exclusive="true">
        <FromPopulation actor="XmppTcpNl"/>
      </ActorReference>
      <ActorReference name="To" exclusive="false">
        <FromPopulation actor="XmppTcpNl"/>
      </ActorReference>
      <SetVariable name="StartTime">
        <Script>Now</Script>
      </SetVariable>
    </StochasticEvent>
    <StochasticEvent distribution="SecondHalfLocal" activity="SendLocalXmppMessage">
      <Description>Sends an XML message from one random XMPP client to another, both connected to the Swedish broker.</Description>
      <ActorReference name="From" exclusive="true">
        <FromPopulation actor="XmppTcpSe"/>
      </ActorReference>
      <ActorReference name="To" exclusive="false">
        <FromPopulation actor="XmppTcpSe"/>
      </ActorReference>
      <SetVariable name="StartTime">
        <Script>Now</Script>
      </SetVariable>
    </StochasticEvent>
    <StochasticEvent distribution="FirstHalfFederated" activity="SendFederatedXmppMessage">
      <Description>Sends an XML message from one random XMPP client to another, the first connected to the broker in the Netherlands, the second to the Swedish broker.</Description>
      <ActorReference name="From" exclusive="true">
        <FromPopulation actor="XmppTcpNl"/>
      </ActorReference>
      <ActorReference name="To" exclusive="false">
        <FromPopulation actor="XmppTcpSe"/>
      </ActorReference>
      <SetVariable name="StartTime">
        <Script>Now</Script>
      </SetVariable>
    </StochasticEvent>
    <StochasticEvent distribution="SecondHalfFederated" activity="SendFederatedXmppMessage">
      <Description>Sends an XML message from one random XMPP client to another, the first connected to the Swedish broker, the second to the broker in the Netherlands.</Description>
      <ActorReference name="From" exclusive="true">
        <FromPopulation actor="XmppTcpSe"/>
      </ActorReference>
      <ActorReference name="To" exclusive="false">
        <FromPopulation actor="XmppTcpNl"/>
      </ActorReference>
      <SetVariable name="StartTime">
        <Script>Now</Script>
      </SetVariable>
    </StochasticEvent>
    <EventHandler id="XmppLocalMessageReceived" activity="ProcessLocalXmppMessage">
      <Description>Event triggered when an XMPP message has been received from a sender on the same broker.</Description>
    </EventHandler>
    <EventHandler id="XmppFederatedMessageReceived" activity="ProcessFederatedXmppMessage">
      <Description>Event triggered when an XMPP message has been received from a sender on a different broker.</Description>
    </EventHandler>
    <EventHandler id="MeasurePerformance" activity="ReadPerformanceCounters">
      <Description>Server performance is measured regularly during the simulation, and shown in the final report.</Description>
    </EventHandler>
  </Events>
  <Activities>
    <Activity id="ReadPerformanceCounters">
      <Description>This activity measures server performance, by calling a web service and reporting the measured values in the returning JSON object back to the simulator.</Description>
      <Start/>
      <Parallel>
        <Thread>
          <Group title="NL Broker Performance">
            <Eval>M:=GetBrokerPerformance("lab.tagroot.io")</Eval>
            <Sample name="NL Broker CPU (%)">
              <Script>M.cpuPercent</Script>
            </Sample>
            <Sample name="NL Broker Network (kB/s)">
              <Script>M.networkBytesPerSec/1024</Script>
            </Sample>
            <Sample name="NL Broker Free Memory (GB)">
              <Script>M.memoryMBytesFree/1024</Script>
            </Sample>
          </Group>
        </Thread>
        <Thread>
          <Group title="SE Broker Performance">
            <Eval>M:=GetBrokerPerformance("cybercity.online")</Eval>
            <Sample name="SE Broker CPU (%)">
              <Script>M.cpuPercent</Script>
            </Sample>
            <Sample name="SE Broker Network (kB/s)">
              <Script>M.networkBytesPerSec/1024</Script>
            </Sample>
            <Sample name="SE Broker Free Memory (GB)">
              <Script>M.memoryMBytesFree/1024</Script>
            </Sample>
          </Group>
        </Thread>
        <Thread>
          <Group title="Simulator Performance">
            <!-- NOTE: Performance counter names, instance names and category names depends on configuration and locale of operating system of the machine running the simulator. Might have to be changed. -->
            <Sample name="Simulator CPU (%)">
              <!-- Swedish: -->
              <perf:Performance category="Processor" instance="_Total" counter="% Processor Time"/>
              <!-- English:
                 <perf:Performance category="Processor" instance="_Total" counter="% Processor Time"/> -->
            </Sample>
            <Sample name="Simulator Network (kB/s)">
              <!-- Swedish: -->
              <perf:Performance category="Nätverksgränssnitt" instance="Intel[R] Wireless-AC 9560 160MHz" counter="Totalt antal byte/s" divider="1024"/>
              <!-- English:
                 <perf:Performance category="Network Interface" instance="Microsoft Hyper-V Network Adapter" counter="Bytes Total/sec" divider="1024"/> -->
            </Sample>
            <Sample name="Simulator Free Memory (GB)">
              <!-- Swedish: -->
              <perf:Performance category="Minne" counter="Tillgängliga megabyte" divider="1024"/>
              <!-- English:
                 <perf:Performance category="Memory" counter="Available MBytes" divider="1024"/>-->
            </Sample>
          </Group>
        </Thread>
      </Parallel>
      <Stop/>
    </Activity>
    <Activity id="SendLocalXmppMessage" logStart="false" logEnd="false">
      <Description>This activity sends an XML message to a random XMPP recipient on the same broker.</Description>
      <Start/>
      <xmpp:SendMessage actor="From" to="{To.FullJID}">
        <Xml>
          <Loc xmlns="https://lab.tagroot.io/Examples/XmlMessages.xsd">
            <StartTime>{StartTime.ToString("yyyy-MM-ddTHH:mm:ss.ffffff")}</StartTime>
          </Loc>
        </Xml>
      </xmpp:SendMessage>
      <Count counter="LocalXmppSent"/>
      <Stop/>
    </Activity>
    <Activity id="SendFederatedXmppMessage" logStart="false" logEnd="false">
      <Description>This activity sends an XML message to a random XMPP recipient on another broker.</Description>
      <Start/>
      <xmpp:SendMessage actor="From" to="{To.FullJID}">
        <Xml>
          <Fed xmlns="https://lab.tagroot.io/Examples/XmlMessages.xsd">
            <StartTime>{StartTime.ToString("yyyy-MM-ddTHH:mm:ss.ffffff")}</StartTime>
          </Fed>
        </Xml>
      </xmpp:SendMessage>
      <Count counter="FederatedXmppSent"/>
      <Stop/>
    </Activity>
    <Activity id="ProcessLocalXmppMessage" logStart="false" logEnd="false">
      <Description>Processes an XMPP message received from a client on the same broker.</Description>
      <Start/>
      <Count counter="LocalXmppReceived"/>
      <Eval>
        <![CDATA[
          StartTime:=DateTime(e.Content["StartTime"].InnerText);
          Elapsed:=Now.Subtract(StartTime).TotalMilliseconds
        ]]>
      </Eval>
      <Sample name="Local XMPP Roundtrip">
        <Script>Elapsed ms</Script>
      </Sample>
      <Stop/>
    </Activity>
    <Activity id="ProcessFederatedXmppMessage" logStart="false" logEnd="false">
      <Description>Processes an XMPP message received from a client on another broker.</Description>
      <Start/>
      <Count counter="FederatedXmppReceived"/>
      <Eval>
        <![CDATA[
          StartTime:=DateTime(e.Content["StartTime"].InnerText);
          Elapsed:=Now.Subtract(StartTime).TotalMilliseconds
        ]]>
      </Eval>
      <Sample name="Federated XMPP Roundtrip">
        <Script>Elapsed ms</Script>
      </Sample>
      <Stop/>
    </Activity>
  </Activities>
  <Measurements>
    <BucketTime for="ReadPerformanceCounters" duration="PT10S"/>
    <BucketTime for="NL Broker CPU (%)" duration="PT10S"/>
    <BucketTime for="SE Broker CPU (%)" duration="PT10S"/>
    <BucketTime for="Simulator CPU (%)" duration="PT10S"/>
    <BucketTime for="NL Broker Free Memory (GB)" duration="PT10S"/>
    <BucketTime for="SE Broker Free Memory (GB)" duration="PT10S"/>
    <BucketTime for="Simulator Free Memory (GB)" duration="PT10S"/>
    <BucketTime for="NL Broker Network (kB/s)" duration="PT10S"/>
    <BucketTime for="SE Broker Network (kB/s)" duration="PT10S"/>
    <BucketTime for="Simulator Network (kB/s)" duration="PT10S"/>
    <BucketTime for="Local XMPP Roundtrip" duration="PT10S"/>
    <BucketTime for="Federated XMPP Roundtrip" duration="PT10S"/>
    <OutlierRemoval for="Local XMPP Roundtrip" windowSize="15" threshold="1" smooth="true" max="1000" logNotice="false"/>
    <OutlierRemoval for="Federated XMPP Roundtrip" windowSize="15" threshold="1" smooth="true" max="1000" logNotice="false"/>
  </Measurements>
  <Graphs>
    <CombinedExecutionsGraph title="Nr Messages sent" legend="true" header="Send messages">
      <Source ref="SendLocalXmppMessage"/>
      <Source ref="SendFederatedXmppMessage"/>
    </CombinedExecutionsGraph>
    <CombinedExecutionTimeGraph title="Time sending Messages" legend="true">
      <Source ref="SendLocalXmppMessage"/>
      <Source ref="SendFederatedXmppMessage"/>
    </CombinedExecutionTimeGraph>
    <CombinedExecutionsGraph title="Nr Messages processed" legend="true" header="Received messages">
      <Source ref="ProcessLocalXmppMessage"/>
      <Source ref="ProcessFederatedXmppMessage"/>
    </CombinedExecutionsGraph>
    <CombinedExecutionTimeGraph title="Time processing Messages" legend="true">
      <Source ref="ProcessLocalXmppMessage"/>
      <Source ref="ProcessFederatedXmppMessage"/>
    </CombinedExecutionTimeGraph>
    <CombinedSampleGraph title="Message roundtrip" legend="true" header="Performance">
      <Source ref="Local XMPP Roundtrip"/>
      <Source ref="Federated XMPP Roundtrip"/>
    </CombinedSampleGraph>
    <CombinedSampleGraph title="Machine CPU %" legend="true" header="CPU Performance">
      <Source ref="NL Broker CPU (%)"/>
      <Source ref="SE Broker CPU (%)"/>
      <Source ref="Simulator CPU (%)"/>
    </CombinedSampleGraph>
    <CombinedSampleGraph title="Free Memory (MB)" legend="true" header="Memory Performance">
      <Source ref="NL Broker Free Memory (GB)"/>
      <Source ref="SE Broker Free Memory (GB)"/>
      <Source ref="Simulator Free Memory (GB)"/>
    </CombinedSampleGraph>
    <CombinedSampleGraph title="Network (kB/s)" legend="true" header="I/O Performance">
      <Source ref="NL Broker Network (kB/s)"/>
      <Source ref="SE Broker Network (kB/s)"/>
      <Source ref="Simulator Network (kB/s)"/>
    </CombinedSampleGraph>
  </Graphs>
</Model>