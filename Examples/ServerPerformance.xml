<?xml version="1.0" encoding="utf-8"?>
<Model xmlns="http://lab.tagroot.io/Schema/ComSim.xsd"
       xmlns:xmpp="http://lab.tagroot.io/Schema/ComSim/XMPP.xsd"
       timeBase="StartOfSimulation"
       bucketTime="PT10S"
       timeUnit="PT1S"
       timeCycle="PT1M"
       duration="PT10M">
  <Meta>
    <Title>Server Performance</Title>
    <Introduction>Measures performance of simulator and broker machines while XMPP clients send chat messages between each other.</Introduction>
    <Description>
      <![CDATA[
      Measures server CPU, Network traffic and available Memory, as the simulator simulates 40 XMPP clients
      (20 TCP, 10 BOSH, 10 Web-sockets) playing the simple game of guessing a number with each other
      randomly over chat. Simulation lasts 10 minutes, and games are started randomly with an expected
      intensity of 100 started games per minute. Based on the `GuessANumber.xml` example.
      ]]>
    </Description>
    <Preparation>
      <![CDATA[
      XMPP
      ------

      The XMPP Client accounts are created automatically, if the broker being used supports 
      [XEP-0077: In-Band Registration](https://xmpp.org/extensions/xep-0077.html). The 
      account registration process can be protected using keys and secrets, if the broker supports
      [XEP-0348: Signing Forms](https://xmpp.org/extensions/xep-0348.html).

      Performance Counters
      ------------------------
      
      For this simulation to work, the `Performance.ws` Web Service script available in the
      [Examples](https://github.com/Trust-Anchor-Group/ComSim/tree/master/Examples) folder in the
      [ComSim](https://github.com/Trust-Anchor-Group/ComSim) project, needs to be copied to the
      `/Reports` web folder of the [TAG Neuron](https://lab.tagroot.io/Broker.md) or the
      [IoT Gateway](https://waher.se/IoTGateway/Index.md) web server. For readability, the web service
      script contais the following script, executed when the resource is accessed:

          {
              "cpuPercent":PerformanceCounterValue("Processor","_Total","% Processor Time"),
              "networkBytesPerSec":PerformanceCounterValue("Network Interface","Microsoft Hyper-V Network Adapter","Bytes Total/sec"),
              "memoryMBytesFree":PerformanceCounterValue("Memory","Available MBytes")
          }
      ]]>
    </Preparation>
    <ModelScript>
      <![CDATA[
      GetPerformance():=Post("https://lab.tagroot.io/Reports/Performance.ws","","application/json");
      
      MinValue:=1;
      MaxValue:=100;
      
      CalcGuess(Min,Max):=Round((Min+Max)/2);
      
      LogGame(State):=
      (
        Tags:=
        {
          Object:State.GM,
          Actor:State.Player,
          N:State.Guess,
          NrGuesses:State.Nr
        };
        i:=1;
        foreach Guess in State.Guesses do Tags.("Guess"+Str(i++)):=Guess;
        LogNotice("Game ended.",Tags);
      );
      ]]>
    </ModelScript>
  </Meta>
  <Assemblies>
    <Assembly fileName="TAG.Simulator.XMPP.dll"/>
  </Assemblies>
  <Actors>
    <Timer id="PerformanceTimer" N="1" period="PT2S">
      <ExternalEvent name="Elapsed" event="MeasurePerformance"/>
    </Timer>
    <xmpp:XmppActorTcp domain="lab.tagroot.io" userName="XmppTcp" id="XmppTcp" N="20" apiKey="LabApiKey1" secret="LabSecret1" alwaysConnected="true">
      <ExternalEvent name="ChatMessage" event="MessageReceived" actorName="To">
        <Parameter name="e"/>
      </ExternalEvent>
    </xmpp:XmppActorTcp>
    <xmpp:XmppActorBosh domain="lab.tagroot.io" userName="XmppBosh" id="XmppBosh" N="10" apiKey="LabApiKey1" secret="LabSecret1" alwaysConnected="true">
      <ExternalEvent name="ChatMessage" event="MessageReceived" actorName="To">
        <Parameter name="e"/>
      </ExternalEvent>
    </xmpp:XmppActorBosh>
    <xmpp:XmppActorWebSocket domain="lab.tagroot.io" userName="XmppWebSocket" id="XmppWebSocket" N="10" apiKey="LabApiKey1" secret="LabSecret1" alwaysConnected="true">
      <ExternalEvent name="ChatMessage" event="MessageReceived" actorName="To">
        <Parameter name="e"/>
      </ExternalEvent>
    </xmpp:XmppActorWebSocket>
  </Actors>
  <Distributions>
    <Uniform id="HundredPerMinute" from="0" to="60" N="100"/>
  </Distributions>
  <Events>
    <StochasticEvent distribution="HundredPerMinute" activity="StartGame"
                     guard="!Global.ContainsVariable(From.FullJID+' '+To.FullJID) and !Global.ContainsVariable(To.FullJID+' '+From.FullJID)">
      <Description>A game session between two random XMPP clients is started at a frequency of a hundred times per minute using a uniform distribution.</Description>
      <ActorReference name="From" exclusive="true">
        <FromPopulation actor="XmppTcp"/>
        <FromPopulation actor="XmppBosh"/>
        <FromPopulation actor="XmppWebSocket"/>
      </ActorReference>
      <ActorReference name="To" exclusive="false">
        <FromPopulation actor="XmppTcp"/>
        <FromPopulation actor="XmppBosh"/>
        <FromPopulation actor="XmppWebSocket"/>
      </ActorReference>
    </StochasticEvent>
    <EventHandler id="MessageReceived" activity="RespondToMessage">
      <Description>Once a message is received from an actor, a proper response should be sent, or the game session be closed.</Description>
    </EventHandler>
    <EventHandler id="MeasurePerformance" activity="ReadPerformanceCounters">
      <Description>Server performance is measured regularly during the simulation, and shown in the final report.</Description>
    </EventHandler>
  </Events>
  <Activities>
    <Activity id="ReadPerformanceCounters">
      <Description>This activity measures server performance, by calling a web service and reporting the measured values in the returning JSON object back to the simulator.</Description>
      <Start/>
      <Eval>M:=GetPerformance()</Eval>
      <Sample name="CPU (%)">
        <Script>M.cpuPercent</Script>
      </Sample>
      <Sample name="Network (kB/s)">
        <Script>M.networkBytesPerSec/1024</Script>
      </Sample>
      <Sample name="Free Memory (GB)">
        <Script>M.memoryMBytesFree/1024</Script>
      </Sample>
      <Stop/>
    </Activity>
    <Activity id="StartGame">
      <Description>This activity starts a game session, by randomly selecting a number between 1 and 100, and sending an introductory chat message to a random recipient.</Description>
      <Start/>
      <Count counter="Started"/>
      <Inc counter="ConcurrentGames"/>
      <Eval>
        <![CDATA[
        N:=Round(Uniform(MinValue,MaxValue));
        Key:=From.FullJID+" "+To.FullJID;
        Global[Key]:=
        {
          Number:N,
          Min:MinValue,
          Max:MaxValue
        }
        ]]>
      </Eval>
      <Sample name="Number">
        <Script>N</Script>
      </Sample>
      <Action actor="From" action="SendChatMessage" To="{To.FullJID}" Body="{'Hello. Guess a number between '+MinValue+' and '+MaxValue+'.'}"/>
      <Count counter="Tx"/>
      <Stop/>
    </Activity>
    <Activity id="RespondToMessage">
      <Description>This activity responds to incoming chat messages, with the aim at guessing the number selected by the sender.</Description>
      <Start/>
      <Count counter="Rx"/>
      <Eval>Key:=To.FullJID+" "+e.From</Eval>
      <Delay duration="PT2S"/>
      <Conditional>
        <Condition condition="e.Body like &quot;Hello[.] Guess a number between (?'Min'\\d+) and (?'Max'\\d+)[.]&quot;">
          <Group title="First guess">
            <Eval>
              <![CDATA[
              Guess:=CalcGuess(Min,Max);
              Global[Key]:=
              {
                GM:e.From,
                Player:e.To,
                Guess:Guess,
                Guesses:[Guess],
                Min:Min,
                Max:Max,
                Nr:1
              }
              ]]>
            </Eval>
            <Action actor="To" action="SendChatMessage" To="{e.From}" Body="{Str(Guess)}"/>
            <Count counter="Tx"/>
            <Count counter="Guesses"/>
          </Group>
        </Condition>
        <Otherwise>
          <Eval>State:=Global[Key]</Eval>
          <Conditional>
            <Condition condition="e.Body like &quot;(?'Guess'\\d+)&quot;">
              <Group title="Responding to guess">
                <Conditional>
                  <Condition condition="Guess=State.Number">
                    <Action actor="To" action="SendChatMessage" To="{e.From}" Body="Correct"/>
                    <Count counter="Tx"/>
                    <Eval>Global.Remove(Key)</Eval>
                  </Condition>
                  <Condition condition="Guess&lt;State.Number">
                    <Action actor="To" action="SendChatMessage" To="{e.From}" Body="Larger"/>
                    <Count counter="Tx"/>
                  </Condition>
                  <Otherwise>
                    <Action actor="To" action="SendChatMessage" To="{e.From}" Body="Smaller"/>
                    <Count counter="Tx"/>
                  </Otherwise>
                </Conditional>
              </Group>
            </Condition>
            <Otherwise>
              <Group title="Guessing number">
                <Conditional>
                  <Condition condition="e.Body='Larger'">
                    <Eval>
                      <![CDATA[
                      State.Min:=State.Guess+1;
                      Guess:=CalcGuess(State.Min,State.Max);
                      State.Guess:=Guess;
                      State.Guesses:=join(State.Guesses,Guess);
                      State.Nr++
                      ]]>
                    </Eval>
                    <Count counter="Guesses"/>
                    <Action actor="To" action="SendChatMessage" To="{e.From}" Body="{Str(Guess)}"/>
                    <Count counter="Tx"/>
                  </Condition>
                  <Condition condition="e.Body='Smaller'">
                    <Eval>
                      <![CDATA[
                      State.Max:=State.Guess-1;
                      Guess:=CalcGuess(State.Min,State.Max);
                      State.Guesses:=join(State.Guesses,Guess);
                      State.Guess:=Guess;
                      State.Nr++
                      ]]>
                    </Eval>
                    <Count counter="Guesses"/>
                    <Action actor="To" action="SendChatMessage" To="{e.From}" Body="{Str(Guess)}"/>
                    <Count counter="Tx"/>
                  </Condition>
                  <Condition condition="e.Body='Correct'">
                    <Sample name="GameGuesses">
                      <Script>State.Nr</Script>
                    </Sample>
                    <Dec counter="ConcurrentGames"/>
                    <Eval>LogGame(State)</Eval>
                    <Eval>Global.Remove(Key)</Eval>
                    <Count counter="Finished"/>
                    <Count counter="Tx"/>
                  </Condition>
                  <Otherwise>
                    <Dec counter="ConcurrentGames"/>
                    <Eval>Global.Remove(Key)</Eval>
                    <Count counter="Terminated"/>
                    <Eval>LogDebug(e.Body)</Eval>
                  </Otherwise>
                </Conditional>
              </Group>
            </Otherwise>
          </Conditional>
        </Otherwise>
      </Conditional>
      <Stop/>
    </Activity>
  </Activities>
  <Graphs>
    <CustomGraph for="Number">
      <![CDATA[
      [Labels,Counts]:=Histogram(Number,0,100,20);
      G:=VerticalBars(Labels,Counts);
      G.LabelX:="Game number";
      G.LabelY:="Number of times used";
      G.Title:="Distribution of numbers selected in games";
      G
      ]]>
    </CustomGraph>
  </Graphs>
</Model>