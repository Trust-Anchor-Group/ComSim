<?xml version="1.0" encoding="utf-8"?>
<Model xmlns="http://trustanchorgroup.com/Schema/ComSim.xsd"
       xmlns:xmpp="http://trustanchorgroup.com/Schema/ComSim/XMPP.xsd"
       xmlns:iot="http://trustanchorgroup.com/Schema/ComSim/XMPPIoT.xsd"
       timeBase="StartOfSimulation"
       bucketTime="PT1S"
       timeUnit="PT1S"
       timeCycle="PT1M"
       duration="PT15S">
	<Meta>
		<Title>XMPP Devices (Sensors, Actuators &amp; Controllers)</Title>
		<Introduction>Simulates a set of XMPP Sensors, Actuators and Controllers.</Introduction>
		<Description>
			<![CDATA[ 
			Simulates 20 XMPP Sensors (10 Outdoor and 10 Indoor Temperature Sensors), 10 XMPP Actuators (Heaters) and 10 XMPP Controllers 
			(Thermostats, clients of one sensor and actuator each), controlling Heater output, based on Sensor output. Outdoor Sensor 
			Temperature Value varies randomly over time. Indoor Sensor Temperature Value varies depending on Outdoor Temperature and
			Heater output. Controllers subscribe to events, and control Heater output based on current Indoor Temperature, and a goal 
			Temperature that can be configured. Model is simplified, to illustrate communicative aspects, rather than physical properties.
			]]>
		</Description>
		<Preparation>
			<![CDATA[
			XMPP
			------

			The XMPP Client accounts are created automatically, if the broker being used supports 
			[XEP-0077: In-Band Registration](https://xmpp.org/extensions/xep-0077.html). The 
			account registration process can be protected using keys and secrets, if the broker supports
			[XEP-0348: Signing Forms](https://xmpp.org/extensions/xep-0348.html).
			]]>
		</Preparation>
		<ModelScript>
			<![CDATA[
			IntToStr2(i):=i<10?"0"+Str(i):Str(i);
			
			foreach i in 1..10 do
			(
				Global["DataOutdoorTemp"+IntToStr2(i)]:=
				{
					"Temperature":Uniform(-10,40)
				};

				Global["DataIndoorTemp"+IntToStr2(i)]:=
				{
					"Temperature":22
				};
				
				Global["DataHeater"+IntToStr2(i)]:=
				{
					"Enabled":false,
					"Temperature":22
				};
				
				Global["DataThermostat"+IntToStr2(i)]:=
				{
					"Enabled":false,
					"Goal":22
				};
			);
			]]>
		</ModelScript>
	</Meta>
	<Assemblies>
		<Assembly fileName="TAG.Simulator.Performance.dll"/>
		<Assembly fileName="TAG.Simulator.XMPP.dll"/>
		<Assembly fileName="TAG.Simulator.XMPP.IoT.dll"/>
	</Assemblies>
	<Actors>
		<Timer id="ModelTimer" N="1" period="PT1S">
			<ExternalEvent name="Elapsed" event="ModelTimerElapsed"/>
		</Timer>
		<Timer id="SampleTimer" N="1" period="PT5S">
			<ExternalEvent name="Elapsed" event="SampleTimerElapsed"/>
		</Timer>
		<xmpp:XmppActorTcp domain="1451.ieeehyd.org" userName="SimOutdoorTemp" id="OutdoorTemp" N="10" apiKey="IeeeHyderabadSimKey" secret="IeeeHyderabadSimSecret" alwaysConnected="true">
			<iot:SensorServerExtension id="OutdoorTempSensor"/>
			<ExternalEvent name="OnExecuteReadoutRequest" event="ReadOutdoorTemperatureEvent" actorName="Sensor">
				<Parameter name="e"/>
			</ExternalEvent>
		</xmpp:XmppActorTcp>
		<xmpp:XmppActorTcp domain="1451.ieeehyd.org" userName="SimIndoorTemp" id="IndoorTemp" N="10" apiKey="IeeeHyderabadSimKey" secret="IeeeHyderabadSimSecret" alwaysConnected="true">
			<iot:SensorServerExtension id="IndoorTempSensor"/>
			<ExternalEvent name="OnExecuteReadoutRequest" event="ReadIndoorTemperatureEvent" actorName="Sensor">
				<Parameter name="e"/>
			</ExternalEvent>
		</xmpp:XmppActorTcp>
		<xmpp:XmppActorTcp domain="1451.ieeehyd.org" userName="SimHeater" id="Heater" N="10" apiKey="IeeeHyderabadSimKey" secret="IeeeHyderabadSimSecret" alwaysConnected="true">
			<iot:ControlServerExtension/>
			<iot:SensorServerExtension id="HeaderSensor"/>
			<ExternalEvent name="OnExecuteReadoutRequest" event="ReadHeaterEvent" actorName="Sensor">
				<Parameter name="e"/>
			</ExternalEvent>
		</xmpp:XmppActorTcp>
		<xmpp:XmppActorTcp domain="1451.ieeehyd.org" userName="SimThermostat" id="Thermostat" N="10" apiKey="IeeeHyderabadSimKey" secret="IeeeHyderabadSimSecret" alwaysConnected="true">
			<iot:SensorClientExtension/>
			<iot:ControlClientExtension/>
			<iot:ControlServerExtension/>
			<iot:SensorServerExtension id="ThermostatSensor"/>
			<ExternalEvent name="OnExecuteReadoutRequest" event="ReadThermostatEvent" actorName="Sensor">
				<Parameter name="e"/>
			</ExternalEvent>
		</xmpp:XmppActorTcp>
	</Actors>
	<Distributions>
	</Distributions>
	<Events>
		<EventHandler id="ModelTimerElapsed" activity="Step">
			<Description>Event raised every second, to increment the simulated temperature values.</Description>
		</EventHandler>
		<EventHandler id="SampleTimerElapsed" activity="Sample">
			<Description>Event raised every five seconds, to sample and report current momentary values.</Description>
		</EventHandler>
		<EventHandler id="ReadOutdoorTemperatureEvent" activity="ReadOutdoorTemperature">
			<Description>Event raised when a client wants to read an outdoor temperature sensor.</Description>
		</EventHandler>
		<EventHandler id="ReadIndoorTemperatureEvent" activity="ReadIndoorTemperature">
			<Description>Event raised when a client wants to read an indoor temperature sensor.</Description>
		</EventHandler>
		<EventHandler id="ReadHeaterEvent" activity="ReadHeater">
			<Description>Event raised when a client wants to read a heater.</Description>
		</EventHandler>
		<EventHandler id="ReadThermostatEvent" activity="ReadThermostat">
			<Description>Event raised when a client wants to read a thermostat.</Description>
		</EventHandler>
	</Events>
	<Activities>
		<Activity id="Step">
			<Description>Calculates the next step for all simulated physical quantities.</Description>
			<Start/>
			<Eval>
				<![CDATA[
				foreach i in 1..10 do
				(
					OutdoorTempData:=Global["DataOutdoorTemp"+IntToStr2(i)];
					IndoorTempData:=Global["DataIndoorTemp"+IntToStr2(i)];
					HeaterData:=Global["DataHeater"+IntToStr2(i)];
					ThermostatData:=Global["DataThermostat"+IntToStr2(i)];

					OutdoorTempData.Temperature+=Uniform(-0.001,0.001);
				);
				]]>
			</Eval>
			<Stop/>
		</Activity>
		<Activity id="Sample">
			<Description>Samples current values and reports them as momentary.</Description>
			<Start/>
			<Eval>i:=0</Eval>
			<While>
				<Condition condition="i++&lt;10">
					<Eval>
						<![CDATA[
						OutdoorTempData:=Global["DataOutdoorTemp"+IntToStr2(i)];
						IndoorTempData:=Global["DataIndoorTemp"+IntToStr2(i)];
						HeaterData:=Global["DataHeater"+IntToStr2(i)];
						ThermostatData:=Global["DataThermostat"+IntToStr2(i)];

						OutdoorTempSensor:=Global["OutdoorTempSensor"+IntToStr2(i)];
						IndoorTempSensor:=Global["IndoorTempSensor"+IntToStr2(i)];
						HeaterSensor:=Global["HeaterSensor"+IntToStr2(i)];
						ThermostatSensor:=Global["ThermostatSensor"+IntToStr2(i)];
						]]>
					</Eval>
					<iot:NewMomentaryValues sensor="OutdoorTempSensor">
						<iot:QuantityField name="Temperature" nrDecimals="1" unit="°C" type="Momentary" qos="AutomaticReadout">
							<Script>OutdoorTempData.Temperature</Script>
						</iot:QuantityField>
					</iot:NewMomentaryValues>
					<iot:NewMomentaryValues sensor="IndoorTempSensor">
						<iot:QuantityField name="Temperature" nrDecimals="1" unit="°C" type="Momentary" qos="AutomaticReadout">
							<Script>IndoorTempData.Temperature</Script>
						</iot:QuantityField>
					</iot:NewMomentaryValues>
					<iot:NewMomentaryValues sensor="HeaterSensor">
						<iot:QuantityField name="Temperature" nrDecimals="1" unit="°C" type="Momentary" qos="AutomaticReadout">
							<Script>HeaterData.Temperature</Script>
						</iot:QuantityField>
					</iot:NewMomentaryValues>
				</Condition>
			</While>
			<Stop/>
		</Activity>
		<Activity id="ReadOutdoorTemperature">
			<Description>Performs a readout of an outdoor temperature sensor.</Description>
			<Start/>
			<Count counter="ReadSensor"/>
			<Count counter="ReadOutdoorTemperature"/>
			<Eval>Data:=Global["Data"+Sensor.InstanceId]</Eval>
			<iot:ReportFields>
				<iot:QuantityField name="Temperature" nrDecimals="1" unit="°C" type="Momentary" qos="AutomaticReadout">
					<Script>Data.Temperature</Script>
				</iot:QuantityField>
			</iot:ReportFields>
			<Stop/>
		</Activity>
		<Activity id="ReadIndoorTemperature">
			<Description>Performs a readout of an indoor temperature sensor.</Description>
			<Start/>
			<Count counter="ReadSensor"/>
			<Count counter="ReadIndoorTemperature"/>
			<Eval>Data:=Global["Data"+Sensor.InstanceId]</Eval>
			<iot:ReportFields>
				<iot:QuantityField name="Temperature" nrDecimals="1" unit="°C" type="Momentary" qos="AutomaticReadout">
					<Script>Data.Temperature</Script>
				</iot:QuantityField>
			</iot:ReportFields>
			<Stop/>
		</Activity>
		<Activity id="ReadHeater">
			<Description>Performs a readout of heater.</Description>
			<Start/>
			<Count counter="ReadSensor"/>
			<Count counter="ReadHeater"/>
			<Eval>Data:=Global["Data"+Sensor.InstanceId]</Eval>
			<iot:ReportFields>
				<iot:QuantityField name="Temperature" nrDecimals="1" unit="°C" type="Momentary" qos="AutomaticReadout">
					<Script>Data.Temperature</Script>
				</iot:QuantityField>
				<iot:BooleanField name="Enabled" type="Status" qos="AutomaticReadout" writable="true">
					<Script>Data.Enabled</Script>
				</iot:BooleanField>
			</iot:ReportFields>
			<Stop/>
		</Activity>
		<Activity id="ReadThermostat">
			<Description>Performs a readout of a thermostat.</Description>
			<Start/>
			<Count counter="ReadSensor"/>
			<Count counter="ReadThermostat"/>
			<Eval>Data:=Global["Data"+Sensor.InstanceId]</Eval>
			<iot:ReportFields>
				<iot:QuantityField name="Temperature, Goal" nrDecimals="1" unit="°C" type="Status" qos="AutomaticReadout">
					<Script>Data.Goal</Script>
				</iot:QuantityField>
				<iot:BooleanField name="Enabled" type="Status" qos="AutomaticReadout" writable="true">
					<Script>Data.Enabled</Script>
				</iot:BooleanField>
			</iot:ReportFields>
			<Stop/>
		</Activity>
	</Activities>
	<Graphs>
	</Graphs>
</Model>