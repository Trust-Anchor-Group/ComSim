<?xml version="1.0" encoding="utf-8"?>
<Model xmlns="http://trustanchorgroup.com/Schema/ComSim.xsd"
       xmlns:xmpp="http://trustanchorgroup.com/Schema/ComSim/XMPP.xsd"
       xmlns:iot="http://trustanchorgroup.com/Schema/ComSim/XMPPIoT.xsd"
       timeBase="StartOfSimulation"
       bucketTime="PT5S"
       timeUnit="PT1S"
       timeCycle="PT10M"
       duration="PT10M">
	<Meta>
		<Title>XMPP Devices (Sensors, Actuators &amp; Controllers)</Title>
		<Introduction>Simulates a set of XMPP Sensors, Actuators and Controllers.</Introduction>
		<Description>
			<![CDATA[ 
			Simulates 20 XMPP Sensors (10 Outdoor and 10 Indoor Temperature Sensors), 10 XMPP Actuators (Heaters) and 10 XMPP Controllers 
			(Thermostats, clients of one sensor and actuator each), controlling Heater output, based on Sensor output. Outdoor Sensor 
			Temperature Value varies randomly over time. Indoor Sensor Temperature Value varies depending on Outdoor Temperature and
			Heater output, using a simplified heat transfer function. Controllers read sensor data  and control Heater output based on 
			current Indoor Temperature, comparing it to a goal Temperature that can be configured. Model is simplified, heat transfer made 
			quicker, to illustrate communicative aspects, rather than physical properties. All devices can be interacted with using
			external clients, such as the [Simple IoT Client](https://waher.se/IoTGateway/SimpleIoTClient.md) or
			[Tag ID App](https://github.com/Trust-Anchor-Group/IdApp).
			]]>
		</Description>
		<Preparation>
			<![CDATA[
			XMPP
			------

			The XMPP Client accounts are created automatically, if the broker being used supports 
			[XEP-0077: In-Band Registration](https://xmpp.org/extensions/xep-0077.html). The 
			account registration process can be protected using keys and secrets, if the broker supports
			[XEP-0348: Signing Forms](https://xmpp.org/extensions/xep-0348.html).
			]]>
		</Preparation>
		<ModelScript>
			<![CDATA[
			IntToStr2(i):=i<10?"0"+Str(i):Str(i);
			
			foreach i in 1..10 do
			(
				Global["DataOutdoorTemp"+IntToStr2(i)]:=
				{
					"Temperature":Uniform(-10,25)
				};

				Global["DataIndoorTemp"+IntToStr2(i)]:=
				{
					"Temperature":22
				};
				
				Global["DataHeater"+IntToStr2(i)]:=
				{
					"Enabled":false,
					"Temperature":22
				};
				
				Global["DataThermostat"+IntToStr2(i)]:=
				{
					"Enabled":true,
					"Goal":22
				};
			);
			]]>
		</ModelScript>
	</Meta>
	<Assemblies>
		<Assembly fileName="TAG.Simulator.Performance.dll"/>
		<Assembly fileName="TAG.Simulator.XMPP.dll"/>
		<Assembly fileName="TAG.Simulator.XMPP.IoT.dll"/>
	</Assemblies>
	<Actors>
		<Timer id="ModelTimer" N="10" period="PT1S">
			<ExternalEvent name="Elapsed" event="ModelTimerElapsed" actorName="ModelTimer"/>
		</Timer>
		<Timer id="PublishTimer" N="10" period="PT5S">
			<ExternalEvent name="Elapsed" event="PublishTimerElapsed" actorName="PublishTimer"/>
		</Timer>
		<Timer id="ControlTimer" N="10" period="PT5S">
			<ExternalEvent name="Elapsed" event="ControlTimerElapsed" actorName="ControlTimer"/>
		</Timer>
		<xmpp:XmppActorTcp id="OutdoorTemp" domain="lab.tagroot.io" userName="SimOutdoorTemp" N="10" apiKey="LabApiKey1" secret="LabSecret1" alwaysConnected="true">
			<xmpp:PepExtension/>
			<iot:SensorServerExtension id="OutdoorTempSensor"/>
			<ExternalEvent name="OnExecuteReadoutRequest" event="ReadOutdoorTemperatureEvent" actorName="Sensor">
				<Parameter name="e"/>
			</ExternalEvent>
		</xmpp:XmppActorTcp>
		<xmpp:XmppActorTcp id="IndoorTemp" domain="lab.tagroot.io" userName="SimIndoorTemp" N="10" apiKey="LabApiKey1" secret="LabSecret1" alwaysConnected="true">
			<xmpp:PepExtension/>
			<iot:SensorServerExtension id="IndoorTempSensor"/>
			<ExternalEvent name="OnExecuteReadoutRequest" event="ReadIndoorTemperatureEvent" actorName="Sensor">
				<Parameter name="e"/>
			</ExternalEvent>
		</xmpp:XmppActorTcp>
		<xmpp:XmppActorTcp id="Heater" domain="lab.tagroot.io" userName="SimHeater" N="10" apiKey="LabApiKey1" secret="LabSecret1" alwaysConnected="true">
			<xmpp:PepExtension/>
			<iot:SensorServerExtension id="HeaterSensor"/>
			<ExternalEvent name="OnExecuteReadoutRequest" event="ReadHeaterEvent" actorName="Sensor">
				<Parameter name="e"/>
			</ExternalEvent>
			<iot:ControlServerExtension>
				<iot:BooleanControlParameter name="Enabled" label="Heater enabled" description="If checked, heater is enabled" variable="Value" actor="Heater" setEvent="SetHeaterEnabledEvent">
					<Script>
						<![CDATA[
						Index:=Heater.InstanceId.Substring(6);
						Data:=Global["DataHeater"+Index];
						Data.Enabled
						]]>
					</Script>
				</iot:BooleanControlParameter>
			</iot:ControlServerExtension>
		</xmpp:XmppActorTcp>
		<xmpp:XmppActorTcp id="Thermostat" domain="lab.tagroot.io" userName="SimThermostat" N="10" apiKey="LabApiKey1" secret="LabSecret1" alwaysConnected="true">
			<xmpp:PepExtension/>
			<iot:SensorClientExtension id="ThermostatSensorClient"/>
			<iot:ControlClientExtension id="ThermostatControlClient"/>
			<iot:SensorServerExtension/>
			<ExternalEvent name="OnExecuteReadoutRequest" event="ReadThermostatEvent" actorName="Sensor">
				<Parameter name="e"/>
			</ExternalEvent>
			<iot:ControlServerExtension>
				<iot:BooleanControlParameter name="Enabled" label="Thermostat enabled" description="If checked, thermostat is enabled" variable="Value" actor="Thermostat" setEvent="SetThermostatEnabledEvent">
					<Script>
						<![CDATA[
						Index:=Thermostat.InstanceId.Substring(10);
						Data:=Global["DataThermostat"+Index];
						Data.Enabled
						]]>
					</Script>
				</iot:BooleanControlParameter>
				<iot:DoubleControlParameter name="Goal" label="Goal Temperature (C):" description="The indoor temperature the thermostat tries to achieve." variable="Value" actor="Thermostat" setEvent="SetThermostatGoalEvent">
					<Script>
						<![CDATA[
						Index:=Thermostat.InstanceId.Substring(10);
						Data:=Global["DataThermostat"+Index];
						Data.Goal
						]]>
					</Script>
				</iot:DoubleControlParameter>
			</iot:ControlServerExtension>
		</xmpp:XmppActorTcp>
	</Actors>
	<Distributions>
	</Distributions>
	<Events>
		<EventHandler id="ModelTimerElapsed" activity="Step">
			<Description>Event raised every second, to increment the simulated temperature values.</Description>
		</EventHandler>
		<EventHandler id="PublishTimerElapsed" activity="Publish">
			<Description>Event raised every five seconds, to sample and report current momentary values.</Description>
		</EventHandler>
		<EventHandler id="ControlTimerElapsed" activity="Control">
			<Description>Event raised every five seconds, where the thermostat reads the corresponding sensor values, and performs any necessary control actions.</Description>
		</EventHandler>
		<EventHandler id="ReadOutdoorTemperatureEvent" activity="ReadOutdoorTemperature">
			<Description>Event raised when a client wants to read an outdoor temperature sensor.</Description>
		</EventHandler>
		<EventHandler id="ReadIndoorTemperatureEvent" activity="ReadIndoorTemperature">
			<Description>Event raised when a client wants to read an indoor temperature sensor.</Description>
		</EventHandler>
		<EventHandler id="ReadHeaterEvent" activity="ReadHeater">
			<Description>Event raised when a client wants to read a heater.</Description>
		</EventHandler>
		<EventHandler id="ReadThermostatEvent" activity="ReadThermostat">
			<Description>Event raised when a client wants to read a thermostat.</Description>
		</EventHandler>
		<EventHandler id="SetHeaterEnabledEvent" activity="SetHeaterEnabled">
			<Description>Event raised when a control command is received enabling or disabling a Heater.</Description>
		</EventHandler>
		<EventHandler id="SetThermostatEnabledEvent" activity="SetThermostatEnabled">
			<Description>Event raised when a control command is received enabling or disabling a Thermostat.</Description>
		</EventHandler>
		<EventHandler id="SetThermostatGoalEvent" activity="SetThermostatGoal">
			<Description>Event raised when a control command is received setting the Goal Temperature for a Thermostat.</Description>
		</EventHandler>
	</Events>
	<Activities>
		<Activity id="Step" logStart="false" logEnd="false">
			<Description>Calculates the next step for simulated physical quantities in one system.</Description>
			<Start/>
			<Eval>
				<![CDATA[
				Index:=ModelTimer.InstanceId.Substring(10);
				i:=Num(Index);
				]]>
			</Eval>
			<Eval>
				<![CDATA[
				OutdoorTempData:=Global["DataOutdoorTemp"+Index];
				IndoorTempData:=Global["DataIndoorTemp"+Index];
				HeaterData:=Global["DataHeater"+Index];
				ThermostatData:=Global["DataThermostat"+Index];
				]]>
			</Eval>
			<Eval>
				<![CDATA[
				OutdoorTempData.Temperature+=Uniform(-0.25,0.25);
				]]>
			</Eval>
			<Sample name="Outdoor Temperature {i}">
				<Script>OutdoorTempData.Temperature C</Script>
			</Sample>
			<Eval>
				<![CDATA[
				IndoorTempData.Temperature+=0.01*(
					(OutdoorTempData.Temperature-IndoorTempData.Temperature)+
					(HeaterData.Temperature-IndoorTempData.Temperature));
				]]>
			</Eval>
			<Sample name="Indoor Temperature {i}">
				<Script>IndoorTempData.Temperature C</Script>
			</Sample>
			<Eval>
				<![CDATA[
				HeaterData.Temperature+=0.01*(
					(IndoorTempData.Temperature-HeaterData.Temperature)+
					(HeaterData.Enabled?100-HeaterData.Temperature:0));
				]]>
			</Eval>
			<Sample name="Heater Temperature {i}">
				<Script>HeaterData.Temperature C</Script>
			</Sample>
			<Sample name="Heater Enabled {i}">
				<Script>HeaterData.Enabled?40:0</Script>
			</Sample>
			<Conditional>
				<Condition condition="ThermostatData.Enabled">
					<Sample name="Thermostat Goal {i}">
						<Script>ThermostatData.Goal C</Script>
					</Sample>
				</Condition>
			</Conditional>
			<Stop/>
		</Activity>
		<Activity id="Publish" logStart="false" logEnd="false">
			<Description>Samples current simulated physical properties and reports them as momentary values for the corresponding sensors in one simulated system.</Description>
			<Start/>
			<Eval>
				<![CDATA[
				Index:=PublishTimer.InstanceId.Substring(12);
				i:=Num(Index);
				]]>
			</Eval>
			<Eval>
				<![CDATA[
				OutdoorTempData:=Global["DataOutdoorTemp"+Index];
				OutdoorTempSensor:=Global["OutdoorTempSensor"+Index];
				]]>
			</Eval>
			<iot:NewMomentaryValues sensor="OutdoorTempSensor">
				<iot:QuantityField name="Temperature" nrDecimals="1" unit="°C" type="Momentary" qos="AutomaticReadout">
					<Script>OutdoorTempData.Temperature</Script>
				</iot:QuantityField>
			</iot:NewMomentaryValues>
			<Eval>
				<![CDATA[
				IndoorTempData:=Global["DataIndoorTemp"+Index];
				IndoorTempSensor:=Global["IndoorTempSensor"+Index];
				]]>
			</Eval>
			<iot:NewMomentaryValues sensor="IndoorTempSensor">
				<iot:QuantityField name="Temperature" nrDecimals="1" unit="°C" type="Momentary" qos="AutomaticReadout">
					<Script>IndoorTempData.Temperature</Script>
				</iot:QuantityField>
			</iot:NewMomentaryValues>
			<Eval>
				<![CDATA[
				HeaterData:=Global["DataHeater"+Index];
				HeaterSensor:=Global["HeaterSensor"+Index];
				]]>
			</Eval>
			<iot:NewMomentaryValues sensor="HeaterSensor">
				<iot:QuantityField name="Temperature" nrDecimals="1" unit="°C" type="Momentary" qos="AutomaticReadout">
					<Script>HeaterData.Temperature</Script>
				</iot:QuantityField>
				<iot:QuantityField name="Enabled" nrDecimals="0" unit="%" type="Status" qos="AutomaticReadout">
					<Script>HeaterData.Enabled</Script>
				</iot:QuantityField>
			</iot:NewMomentaryValues>
			<Stop/>
		</Activity>
		<Activity id="Control" logStart="false" logEnd="false">
			<Description>Performs the actions of a thermostat, by reading the corresponding sensors and taking necessary actions to control the indoor temperature to match a preset and configurable goal temperature.</Description>
			<Start/>
			<Eval>
				<![CDATA[
				Index:=ControlTimer.InstanceId.Substring(12);
				i:=Num(Index);
				]]>
			</Eval>
			<Eval>
				<![CDATA[
				Thermostat:=Global["Thermostat"+Index];
				ThermostatData:=Global["DataThermostat"+Index];
				ThermostatControlClient:=Global["ThermostatControlClient"+Index];
				]]>
			</Eval>
			<Conditional>
				<Condition condition="!ThermostatData.Enabled">
					<Finished/>
				</Condition>
			</Conditional>
			<Parallel>
				<Thread>
					<Eval>
						<![CDATA[
						IndoorTempJid:="SimIndoorTemp"+i+"@lab.tagroot.io";
						IndoorSensorConnection:=Thermostat.Client[IndoorTempJid];
						
						ConnectedToIndoorSensor:=exists(IndoorSensorConnection) and
							(IndoorSensorConnection.State=SubscriptionState.Both or
							IndoorSensorConnection.State=SubscriptionState.To);
							
						IndoorSensorOnline:=ConnectedToIndoorSensor and
							IndoorSensorConnection.HasLastPresence and
							IndoorSensorConnection.LastPresence.IsOnline;
						]]>
					</Eval>
					<Conditional>
						<Condition condition="IndoorSensorOnline">
							<Count counter="RequestSensorData"/>
							<iot:ReadSensor actor="ThermostatSensorClient{Index}" to="{IndoorTempJid}" responseVariable="Indoor" responseType="Object">
								<iot:FieldType>Momentary</iot:FieldType>
							</iot:ReadSensor>
						</Condition>
						<Condition condition="ConnectedToIndoorSensor">
							<Count counter="IndoorSensor{Index} Offline"/>
							<Finished/>
						</Condition>
						<Otherwise>
							<Count counter="SubscribeTo"/>
							<xmpp:SubscribeTo actor="Thermostat" to="{IndoorTempJid}"/>
							<Finished/>
						</Otherwise>
					</Conditional>
				</Thread>
				<Thread>
					<Eval>
						<![CDATA[
						HeaterJid:="SimHeater"+i+"@lab.tagroot.io";
						HeaterConnection:=Thermostat.Client[HeaterJid];
						
						ConnectedToHeater:=exists(HeaterConnection) and
							(HeaterConnection.State=SubscriptionState.Both or
							HeaterConnection.State=SubscriptionState.To);
							
						HeaterOnline:=ConnectedToHeater and
							HeaterConnection.HasLastPresence and
							HeaterConnection.LastPresence.IsOnline;
						]]>
					</Eval>
					<Conditional>
						<Condition condition="HeaterOnline">
							<Count counter="RequestSensorData"/>
							<iot:ReadSensor actor="ThermostatSensorClient{Index}" to="{HeaterJid}" responseVariable="Heater" responseType="Object">
								<iot:FieldType>Momentary</iot:FieldType>
								<iot:FieldType>Status</iot:FieldType>
							</iot:ReadSensor>
						</Condition>
						<Condition condition="ConnectedToHeater">
							<Count counter="Heater{Index} Offline"/>
							<Finished/>
						</Condition>
						<Otherwise>
							<Count counter="SubscribeTo"/>
							<xmpp:SubscribeTo actor="Thermostat" to="{HeaterJid}"/>
							<Finished/>
						</Otherwise>
					</Conditional>
				</Thread>
			</Parallel>
			<Conditional>
				<Condition condition="Indoor.Temperature.Quantity&lt;ThermostatData.Goal °C and !Heater.Enabled.Value">
					<Count counter="Enable"/>
					<iot:ControlActuator to="{HeaterJid}" parameter="Enabled" controller="ThermostatControlClient">
						<Boolean value="true"/>
					</iot:ControlActuator>
				</Condition>
				<Condition condition="Indoor.Temperature.Quantity&gt;ThermostatData.Goal °C and Heater.Enabled.Value">
					<Count counter="Disable"/>
					<iot:ControlActuator to="{HeaterJid}" parameter="Enabled" controller="ThermostatControlClient">
						<Boolean value="false"/>
					</iot:ControlActuator>
				</Condition>
			</Conditional>
			<Stop/>
		</Activity>
		<Activity id="ReadOutdoorTemperature" logStart="false" logEnd="false">
			<Description>Performs a readout of an outdoor temperature sensor.</Description>
			<Start/>
			<Eval>Data:=Global["Data"+Sensor.InstanceId]</Eval>
			<iot:ReportFields>
				<iot:QuantityField name="Temperature" nrDecimals="1" unit="°C" type="Momentary" qos="AutomaticReadout">
					<Script>Data.Temperature</Script>
				</iot:QuantityField>
			</iot:ReportFields>
			<Stop/>
		</Activity>
		<Activity id="ReadIndoorTemperature" logStart="false" logEnd="false">
			<Description>Performs a readout of an indoor temperature sensor.</Description>
			<Start/>
			<Eval>Data:=Global["Data"+Sensor.InstanceId]</Eval>
			<iot:ReportFields>
				<iot:QuantityField name="Temperature" nrDecimals="1" unit="°C" type="Momentary" qos="AutomaticReadout">
					<Script>Data.Temperature</Script>
				</iot:QuantityField>
			</iot:ReportFields>
			<Stop/>
		</Activity>
		<Activity id="ReadHeater" logStart="false" logEnd="false">
			<Description>Performs a readout of heater.</Description>
			<Start/>
			<Eval>Data:=Global["Data"+Sensor.InstanceId]</Eval>
			<iot:ReportFields>
				<iot:QuantityField name="Temperature" nrDecimals="1" unit="°C" type="Momentary" qos="AutomaticReadout">
					<Script>Data.Temperature</Script>
				</iot:QuantityField>
				<iot:BooleanField name="Enabled" type="Status" qos="AutomaticReadout" writable="true">
					<Script>Data.Enabled</Script>
				</iot:BooleanField>
			</iot:ReportFields>
			<Stop/>
		</Activity>
		<Activity id="ReadThermostat" logStart="false" logEnd="false">
			<Description>Performs a readout of a thermostat.</Description>
			<Start/>
			<Eval>Data:=Global["Data"+Sensor.InstanceId]</Eval>
			<iot:ReportFields>
				<iot:QuantityField name="Temperature, Goal" nrDecimals="1" unit="°C" type="Status" qos="AutomaticReadout">
					<Script>Data.Goal</Script>
				</iot:QuantityField>
				<iot:BooleanField name="Enabled" type="Status" qos="AutomaticReadout" writable="true">
					<Script>Data.Enabled</Script>
				</iot:BooleanField>
			</iot:ReportFields>
			<Stop/>
		</Activity>
		<Activity id="SetHeaterEnabled" logStart="false" logEnd="false">
			<Description>Enables or disables a heater.</Description>
			<Start/>
			<Eval>
				<![CDATA[
				Index:=Heater.InstanceId.Substring(6);
				Data:=Global["DataHeater"+Index];
				Data.Enabled:=Value
				]]>
			</Eval>
			<Stop/>
		</Activity>
		<Activity id="SetThermostatEnabled" logStart="false" logEnd="false">
			<Description>Enables or disables a thermostat.</Description>
			<Start/>
			<Eval>
				<![CDATA[
				Index:=Thermostat.InstanceId.Substring(10);
				Data:=Global["DataThermostat"+Index];
				Data.Enabled:=Value
				]]>
			</Eval>
			<Stop/>
		</Activity>
		<Activity id="SetThermostatGoal" logStart="false" logEnd="false">
			<Description>Sets the Goal Temperature of a thermostat.</Description>
			<Start/>
			<Eval>
				<![CDATA[
				Index:=Thermostat.InstanceId.Substring(10);
				Data:=Global["DataThermostat"+Index];
				Data.Goal:=Value
				]]>
			</Eval>
			<Stop/>
		</Activity>
	</Activities>
	<Graphs>
		<CombinedSampleGraph header="System 1" title="Temperatue System 1" legend="true">
			<Source ref="Thermostat Goal 1"/>
			<Source ref="Outdoor Temperature 1"/>
			<Source ref="Indoor Temperature 1"/>
			<Source ref="Heater Temperature 1"/>
			<Source ref="Heater Enabled 1"/>
		</CombinedSampleGraph>
		<CombinedSampleGraph header="System 2" title="Temperatue System 2" legend="true">
			<Source ref="Thermostat Goal 2"/>
			<Source ref="Outdoor Temperature 2"/>
			<Source ref="Indoor Temperature 2"/>
			<Source ref="Heater Temperature 2"/>
			<Source ref="Heater Enabled 2"/>
		</CombinedSampleGraph>
		<CombinedSampleGraph header="System 3" title="Temperatue System 3" legend="true">
			<Source ref="Thermostat Goal 3"/>
			<Source ref="Outdoor Temperature 3"/>
			<Source ref="Indoor Temperature 3"/>
			<Source ref="Heater Temperature 3"/>
			<Source ref="Heater Enabled 3"/>
		</CombinedSampleGraph>
		<CombinedSampleGraph header="System 4" title="Temperatue System 4" legend="true">
			<Source ref="Thermostat Goal 4"/>
			<Source ref="Outdoor Temperature 4"/>
			<Source ref="Indoor Temperature 4"/>
			<Source ref="Heater Temperature 4"/>
			<Source ref="Heater Enabled 4"/>
		</CombinedSampleGraph>
		<CombinedSampleGraph header="System 5" title="Temperatue System 5" legend="true">
			<Source ref="Thermostat Goal 5"/>
			<Source ref="Outdoor Temperature 5"/>
			<Source ref="Indoor Temperature 5"/>
			<Source ref="Heater Temperature 5"/>
			<Source ref="Heater Enabled 5"/>
		</CombinedSampleGraph>
		<CombinedSampleGraph header="System 6" title="Temperatue System 6" legend="true">
			<Source ref="Thermostat Goal 6"/>
			<Source ref="Outdoor Temperature 6"/>
			<Source ref="Indoor Temperature 6"/>
			<Source ref="Heater Temperature 6"/>
			<Source ref="Heater Enabled 6"/>
		</CombinedSampleGraph>
		<CombinedSampleGraph header="System 7" title="Temperatue System 7" legend="true">
			<Source ref="Thermostat Goal 7"/>
			<Source ref="Outdoor Temperature 7"/>
			<Source ref="Indoor Temperature 7"/>
			<Source ref="Heater Temperature 7"/>
			<Source ref="Heater Enabled 7"/>
		</CombinedSampleGraph>
		<CombinedSampleGraph header="System 8" title="Temperatue System 8" legend="true">
			<Source ref="Thermostat Goal 8"/>
			<Source ref="Outdoor Temperature 8"/>
			<Source ref="Indoor Temperature 8"/>
			<Source ref="Heater Temperature 8"/>
			<Source ref="Heater Enabled 8"/>
		</CombinedSampleGraph>
		<CombinedSampleGraph header="System 9" title="Temperatue System 9" legend="true">
			<Source ref="Thermostat Goal 9"/>
			<Source ref="Outdoor Temperature 9"/>
			<Source ref="Indoor Temperature 9"/>
			<Source ref="Heater Temperature 9"/>
			<Source ref="Heater Enabled 9"/>
		</CombinedSampleGraph>
		<CombinedSampleGraph header="System 10" title="Temperatue System 10" legend="true">
			<Source ref="Thermostat Goal 10"/>
			<Source ref="Outdoor Temperature 10"/>
			<Source ref="Indoor Temperature 10"/>
			<Source ref="Heater Temperature 10"/>
			<Source ref="Heater Enabled 10"/>
		</CombinedSampleGraph>
	</Graphs>
</Model>