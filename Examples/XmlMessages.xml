<?xml version="1.0" encoding="utf-8"?>
<Model xmlns="http://trustanchorgroup.com/Schema/ComSim.xsd"
       xmlns:xmpp="http://trustanchorgroup.com/Schema/ComSim/XMPP.xsd"
       xmlns:xmldsig="http://trustanchorgroup.com/Schema/ComSim/ComSimXmlDSig.xsd"
       xmlns:perf="http://trustanchorgroup.com/Schema/ComSim/ComSimPerformance.xsd"
       timeBase="StartOfSimulation"
       bucketTime="PT10S"
       timeUnit="PT1S"
       timeCycle="PT1M"
       duration="PT10M">
  <Meta>
    <Title>XML Messages</Title>
    <Description>
      <![CDATA[ 
      Simulates 100 XMPP clients over TCP exchanging signed and unsigned machine-readable XML messages randomly between each other 
      during 10 minutes, at a total frequency of 1000 messages per minute.
      
      **Note**: Simulation measures server performance during simulation. It uses the method described in the `ServerPerformance.xml`
      example.
      ]]>
    </Description>
    <ModelScript>
      <![CDATA[
      GetBrokerPerformance():=Post("https://lab.tagroot.io/Reports/Performance.ws","","application/json");
      ]]>
    </ModelScript>
  </Meta>
  <Assemblies>
    <Assembly fileName="TAG.Simulator.Performance.dll"/>
    <Assembly fileName="TAG.Simulator.XMPP.dll"/>
    <Assembly fileName="TAG.Simulator.XMLDSIG.dll"/>
  </Assemblies>
  <Actors>
    <Timer id="PerformanceTimer" N="1" period="PT2S">
      <ExternalEvent name="Elapsed" event="MeasurePerformance"/>
    </Timer>
    <xmpp:XmppActorTcp domain="lab.tagroot.io" userName="XmppTcp" id="XmppTcp" N="100" apiKey="LabApiKey1" secret="LabSecret1" alwaysConnected="true">
      <xmpp:MessageHandler name="Msg" namespace="https://lab.tagroot.io/Examples/XmlMessages.xsd" event="UnsignedMessageReceived" actorName="To" eventArgs="e"/>
      <xmpp:MessageHandler name="SignedMsg" namespace="https://lab.tagroot.io/Examples/XmlMessages.xsd" event="SignedMessageReceived" actorName="To" eventArgs="e"/>
    </xmpp:XmppActorTcp>
  </Actors>
  <Distributions>
    <Uniform id="FiveHundredPerMinute" from="0" to="60" N="500"/>
  </Distributions>
  <Events>
    <StochasticEvent distribution="FiveHundredPerMinute" activity="SendUnsignedMessage">
      <Description>Sends an unsigned XML message from one random XMPP client to another, at a frequency of five hundred times per minute using a uniform distribution.</Description>
      <ActorReference name="From" exclusive="true">
        <FromPopulation actor="XmppTcp"/>
      </ActorReference>
      <ActorReference name="To" exclusive="false">
        <FromPopulation actor="XmppTcp"/>
      </ActorReference>
      <SetVariable name="StartTime">
        <Script>Now</Script>
      </SetVariable>
    </StochasticEvent>
    <StochasticEvent distribution="FiveHundredPerMinute" activity="SendSignedMessage">
      <Description>Sends a signed XML message from one random XMPP client to another, at a frequency of five hundred times per minute using a uniform distribution.</Description>
      <ActorReference name="From" exclusive="true">
        <FromPopulation actor="XmppTcp"/>
      </ActorReference>
      <ActorReference name="To" exclusive="false">
        <FromPopulation actor="XmppTcp"/>
      </ActorReference>
      <SetVariable name="StartTime">
        <Script>Now</Script>
      </SetVariable>
    </StochasticEvent>
    <EventHandler id="UnsignedMessageReceived" activity="ProcessUnsignedMessage">
      <Description>Event triggered when an unsigned message has been received.</Description>
    </EventHandler>
    <EventHandler id="SignedMessageReceived" activity="ProcessSignedMessage">
      <Description>Event triggered when a signed message has been received.</Description>
    </EventHandler>
    <EventHandler id="MeasurePerformance" activity="ReadPerformanceCounters">
      <Description>Server and Simulator performance is measured regularly during the simulation, and shown in the final report.</Description>
    </EventHandler>
  </Events>
  <Activities>
    <Activity id="ReadPerformanceCounters">
      <Description>This activity measures the performance of the broker, as well as the machine performing the simulation.</Description>
      <Start/>
      <Parallel>
        <Thread>
          <Group title="Performance at Broker">
            <Eval>M:=GetBrokerPerformance()</Eval>
            <Sample name="Broker CPU (%)">
              <Script>M.cpuPercent</Script>
            </Sample>
            <Sample name="Broker Network (kB/s)">
              <Script>M.networkBytesPerSec/1024</Script>
            </Sample>
            <Sample name="Broker Free Memory (GB)">
              <Script>M.memoryMBytesFree/1024</Script>
            </Sample>
          </Group>
        </Thread>
        <Thread>
          <Group title="Performance at Simulator Machine">
            <!-- NOTE: Performance counter names, instance names and category names depends on configuration and locale of operating system of the machine running the simulator. Might have to be changed. -->
            <Sample name="Simulator CPU (%)">
              <!-- Swedish: -->
              <perf:Performance category="Processor" instance="_Total" counter="% Processor Time"/>
              <!-- English:
                 <perf:Performance category="Processor" instance="_Total" counter="% Processor Time"/> -->
            </Sample>
            <Sample name="Simulator Network (kB/s)">
              <!-- Swedish: -->
              <perf:Performance category="Nätverksgränssnitt" instance="Intel[R] Wireless-AC 9560 160MHz" counter="Totalt antal byte/s" divider="1024"/>
              <!-- English:
                 <perf:Performance category="Network Interface" instance="Microsoft Hyper-V Network Adapter" counter="Bytes Total/sec" divider="1024"/> -->
            </Sample>
            <Sample name="Simulator Free Memory (GB)">
              <!-- Swedish: -->
              <perf:Performance category="Minne" counter="Tillgängliga megabyte" divider="1024"/>
              <!-- English:
                 <perf:Performance category="Memory" counter="Available MBytes" divider="1024"/>-->
            </Sample>
          </Group>
        </Thread>
      </Parallel>
      <Stop/>
    </Activity>
    <Activity id="SendUnsignedMessage">
      <Description>This activity sends an unsigned XML message to a random recipient.</Description>
      <Start/>
      <xmpp:SendMessage actor="From" to="{To.FullJID}">
        <Xml>
          <Msg xmlns="https://lab.tagroot.io/Examples/XmlMessages.xsd">
            <StartTime>{StartTime.ToString("yyyy-MM-ddTHH:mm:ss.ffffff")}</StartTime>
          </Msg>
        </Xml>
      </xmpp:SendMessage>
      <Count counter="UnsignedSent"/>
      <Stop/>
    </Activity>
    <Activity id="ProcessUnsignedMessage">
      <Description>Processes a received unsigned message.</Description>
      <Start/>
      <Count counter="UnsignedReceived"/>
      <Eval>
        <![CDATA[
          StartTime:=DateTime(e.Content["StartTime"].InnerText);
          Elapsed:=Now.Subtract(StartTime).TotalMilliseconds
        ]]>
      </Eval>
      <Sample name="Unsigned Roundtrip">
        <Script>Elapsed ms</Script>
      </Sample>
      <Stop/>
    </Activity>
    <Activity id="SendSignedMessage">
      <Description>This activity sends a signed XML message to a random recipient. The XML message is signed using 4096-bit RSA keys using the [XMLDSIG](https://www.w3.org/TR/xmldsig-core/) standard.</Description>
      <Start/>
      <xmpp:SendMessage actor="From" to="{To.FullJID}">
        <xmldsig:Sign rsaKeyName="{From.BareJID}" rsaKeySize="4096">
          <Xml>
            <SignedMsg xmlns="https://lab.tagroot.io/Examples/XmlMessages.xsd">
              <StartTime>{StartTime.ToString("yyyy-MM-ddTHH:mm:ss.ffffff")}</StartTime>
            </SignedMsg>
          </Xml>
        </xmldsig:Sign>
      </xmpp:SendMessage>
      <Count counter="SignedSent"/>
      <Stop/>
    </Activity>
    <Activity id="ProcessSignedMessage">
      <Description>Processes a received signed message.</Description>
      <Start/>
      <Count counter="SignedReceived"/>
      <xmldsig:Verify rsaKeyName="{e.FromBareJID}">
        <Script>e.Content</Script>
      </xmldsig:Verify>
      <Eval>
        <![CDATA[
          StartTime:=DateTime(e.Content["StartTime"].InnerText);
          Elapsed:=Now.Subtract(StartTime).TotalMilliseconds
        ]]>
      </Eval>
      <Sample name="Signed Roundtrip">
        <Script>Elapsed ms</Script>
      </Sample>
      <Stop/>
    </Activity>
  </Activities>
  <Graphs>
    <CombinedExecutionsGraph title="Nr Messages sent" legend="true" header="Send messages">
      <Source ref="SendUnsignedMessage"/>
      <Source ref="SendSignedMessage"/>
    </CombinedExecutionsGraph>
    <CombinedExecutionTimeGraph title="Time sending Messages" legend="false">
      <Source ref="SendUnsignedMessage"/>
      <Source ref="SendSignedMessage"/>
    </CombinedExecutionTimeGraph>
    <CombinedExecutionsGraph title="Nr Messages processed" legend="true" header="Received messages">
      <Source ref="ProcessUnsignedMessage"/>
      <Source ref="ProcessSignedMessage"/>
    </CombinedExecutionsGraph>
    <CombinedExecutionTimeGraph title="Time processing Messages" legend="false">
      <Source ref="ProcessUnsignedMessage"/>
      <Source ref="ProcessSignedMessage"/>
    </CombinedExecutionTimeGraph>
    <CombinedSampleGraph title="Message roundtrip" legend="true" header="Performance">
      <Source ref="Unsigned Roundtrip"/>
      <Source ref="Signed Roundtrip"/>
    </CombinedSampleGraph>
    <CombinedSampleGraph title="CPU %" legend="true">
      <Source ref="Broker CPU (%)"/>
      <Source ref="Simulator CPU (%)"/>
    </CombinedSampleGraph>
    <CombinedSampleGraph title="Free Memory (GB)" legend="true">
      <Source ref="Broker Free Memory (GB)"/>
      <Source ref="Simulator Free Memory (GB)"/>
    </CombinedSampleGraph>
    <CombinedSampleGraph title="Network (kB/s)" legend="true">
      <Source ref="Broker Network (kB/s)"/>
      <Source ref="Simulator Network (kB/s)"/>
    </CombinedSampleGraph>
  </Graphs>
</Model>