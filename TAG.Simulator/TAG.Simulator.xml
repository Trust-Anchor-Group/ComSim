<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TAG.Simulator</name>
    </assembly>
    <members>
        <member name="T:TAG.Simulator.Events.KeyEventHandler">
            <summary>
            Delegate for key event handlers.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:TAG.Simulator.Events.KeyEventArgs">
            <summary>
            Event arguments for key events.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Events.KeyEventArgs.#ctor(System.String)">
            <summary>
            Event arguments for key events.
            </summary>
            <param name="Name">Key name.</param>
        </member>
        <member name="P:TAG.Simulator.Events.KeyEventArgs.Name">
            <summary>
            Key name
            </summary>
        </member>
        <member name="P:TAG.Simulator.Events.KeyEventArgs.Value">
            <summary>
            Key value
            </summary>
        </member>
        <member name="T:TAG.Simulator.Factory">
            <summary>
            Factory of simulation objects.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Factory.Initialize">
            <summary>
            Initializes the factory
            </summary>
        </member>
        <member name="M:TAG.Simulator.Factory.TryGetSchemaResource(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Reflection.Assembly}@)">
            <summary>
            Tries to get the embedded resource name of the schema defining a namespace, and the corresponding assembly.
            </summary>
            <param name="Namespace">Namespace</param>
            <param name="Result">Embedded resource name and assembly.</param>
            <returns>If the namespace was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Factory.Create(System.Xml.XmlElement,TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a simulation objected, based on its XML definition.
            </summary>
            <param name="Definition">XML definition.</param>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>Created simulation object</returns>
        </member>
        <member name="T:TAG.Simulator.ForEachCallbackMethod">
            <summary>
            Callback method for iteration across the simulation model.
            </summary>
            <param name="Node">Current node being processed.</param>
        </member>
        <member name="T:TAG.Simulator.ISimulationNode">
            <summary>
            Basic interface for simulator nodes. Implementing this interface allows classes with default contructors to be used
            in simulator models.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ISimulationNode.Parent">
            <summary>
            Parent node in the simulation model.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ISimulationNode.Namespace">
            <summary>
            XML Namespace where the element is defined.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ISimulationNode.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ISimulationNode.SchemaResource">
            <summary>
            Points to the embedded XML Schema resource defining the semantics of the XML namespace.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ISimulationNode.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model owning the node.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ISimulationNode.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ISimulationNode.ForEach(TAG.Simulator.ForEachCallbackMethod,System.Boolean)">
            <summary>
            Evaluates <paramref name="Method"/> on each node in the subtree defined by the current node.
            </summary>
            <param name="Method">Method to call.</param>
            <param name="DepthFirst">If children are iterated before parents.</param>
        </member>
        <member name="M:TAG.Simulator.ISimulationNode.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ISimulationNode.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ISimulationNode.Finalize">
            <summary>
            Finalizes the node after simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ISimulationNode.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output node</param>
        </member>
        <member name="M:TAG.Simulator.ISimulationNode.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output node</param>
        </member>
        <member name="T:TAG.Simulator.TimeBase">
            <summary>
            Base of simulation time
            </summary>
        </member>
        <member name="F:TAG.Simulator.TimeBase.StartOfSimulation">
            <summary>
            00:00:00 equals start of simulation.
            </summary>
        </member>
        <member name="F:TAG.Simulator.TimeBase.ComputerClock">
            <summary>
            Time/Date equals computer time/date.
            </summary>
        </member>
        <member name="T:TAG.Simulator.Model">
            <summary>
            Root node of a simulation model
            </summary>
        </member>
        <member name="M:TAG.Simulator.Model.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Root node of a simulation model
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="F:TAG.Simulator.Model.ComSimNamespace">
            <summary>
            http://trustanchorgroup.com/Schema/ComSim.xsd
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.TimeBase">
            <summary>
            Base of simulation time
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.TimeUnit">
            <summary>
            Time unit
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.TimeUnitMs">
            <summary>
            Time unit, in milliseconds
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.TimeCycle">
            <summary>
            Time cycle
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.TimeCycleMs">
            <summary>
            Time cycle, in milliseconds
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.TimeCycleUnits">
            <summary>
            Time cycle, in number of <see cref="P:TAG.Simulator.Model.TimeUnit"/>.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.Duration">
            <summary>
            Simulation duration
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.BucketTime">
            <summary>
            Time to collect events, for statistical purposes.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.SnifferFolder">
            <summary>
            Folder used for sniffer output.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.SnifferTransformFileName">
            <summary>
            Sniffer XSLT file to use to transform sniffer output.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Model.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.Model.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.Model.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Model.Finalize">
            <summary>
            Finalizes the node after simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Model.Register(TAG.Simulator.ObjectModel.Distributions.IDistribution)">
            <summary>
            Registers a distribution with the runtime environment of the model.
            </summary>
            <param name="Distribution">Distribution object.</param>
        </member>
        <member name="M:TAG.Simulator.Model.TryGetDistribution(System.String,TAG.Simulator.ObjectModel.Distributions.IDistribution@)">
            <summary>
            Tries to get a registered distribution from the model.
            </summary>
            <param name="Id">ID of distribution.</param>
            <param name="Distribution">Distribution if found.</param>
            <returns>If a distribution was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.Register(TAG.Simulator.ObjectModel.Actors.IActor)">
            <summary>
            Registers a actor with the runtime environment of the model.
            </summary>
            <param name="Actor">Actor object.</param>
        </member>
        <member name="M:TAG.Simulator.Model.TryGetActor(System.String,TAG.Simulator.ObjectModel.Actors.IActor@)">
            <summary>
            Tries to get a registered actor from the model.
            </summary>
            <param name="Id">ID of actor.</param>
            <param name="Actor">Actor if found.</param>
            <returns>If an actor was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.Register(TAG.Simulator.ObjectModel.Events.IEvent)">
            <summary>
            Registers a event with the runtime environment of the model.
            </summary>
            <param name="Event">Event object.</param>
        </member>
        <member name="M:TAG.Simulator.Model.TryGetEvent(System.String,TAG.Simulator.ObjectModel.Events.IEvent@)">
            <summary>
            Tries to get a registered event from the model.
            </summary>
            <param name="Id">ID of event.</param>
            <param name="Event">Event if found.</param>
            <returns>If an event was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.Register(TAG.Simulator.ObjectModel.Activities.IActivity)">
            <summary>
            Registers a activity with the runtime environment of the model.
            </summary>
            <param name="Activity">Activity object.</param>
        </member>
        <member name="M:TAG.Simulator.Model.TryGetActivity(System.String,TAG.Simulator.ObjectModel.Activities.IActivity@)">
            <summary>
            Tries to get a registered activity from the model.
            </summary>
            <param name="Id">ID of activity.</param>
            <param name="Activity">Activity if found.</param>
            <returns>If an activity was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.Register(System.Collections.Generic.LinkedListNode{TAG.Simulator.ObjectModel.Activities.IActivityNode})">
            <summary>
            Registers a activity node with the runtime environment of the model.
            </summary>
            <param name="ActivityNode">ActivityNode object.</param>
        </member>
        <member name="M:TAG.Simulator.Model.TryGetActivityNode(System.String,System.Collections.Generic.LinkedListNode{TAG.Simulator.ObjectModel.Activities.IActivityNode}@)">
            <summary>
            Tries to get a registered activity node from the model.
            </summary>
            <param name="Id">ID of activity node.</param>
            <param name="ActivityNode">ActivityNode if found.</param>
            <returns>If an activity node was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.Run(System.Threading.Tasks.TaskCompletionSource{System.Boolean})">
            <summary>
            Runs the simulation.
            </summary>
            <param name="Done">Task completion source, that can be set by external events.</param>
            <returns>If simulation completed successfully.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.GetRandomBytes(System.Int32)">
            <summary>
            Gets an array of random bytes.
            </summary>
            <param name="NrBytes">Number of random bytes to generate.</param>
            <returns>Random bytes.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.GetRandomDouble">
            <summary>
            Generates a new floating-point value between 0 and 1, using a cryptographic random number generator.
            </summary>
            <returns>Random number.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.GetRandomInteger(System.Int32)">
            <summary>
            Generates a new random integer between 0 (inclusive) and <paramref name="MaxValueExclusive"/> (exclusive).
            </summary>
            <param name="MaxValueExclusive">Maximum value (exclusive)</param>
            <returns>Random integer value 0 - <paramref name="MaxValueExclusive"/>-1.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.GetKey(System.String)">
            <summary>
            Gets a key from the database. If it does not exist, it prompts the user for input.
            </summary>
            <param name="KeyName">Name of key.</param>
            <returns>Value of key.</returns>
        </member>
        <member name="E:TAG.Simulator.Model.OnGetKey">
            <summary>
            Event raised when the model needs a key from the system.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Model.GetSniffer(System.String)">
            <summary>
            Gets a sniffer, if sniffer output is desired.
            </summary>
            <param name="Actor">Actor</param>
            <returns>Sniffer, if any, null otherwise.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.ExternalEvent(TAG.Simulator.ObjectModel.Actors.IActor,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Method called when an external event has been received.
            </summary>
            <param name="Source">Actor receiving the event.</param>
            <param name="Name">Name of event.</param>
            <param name="Arguments">Event arguments.</param>
            <returns>If event was handled</returns>
        </member>
        <member name="M:TAG.Simulator.Model.IncActivityStartCount(System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Called when an activity is started.
            </summary>
            <param name="ActivityId">Activity ID</param>
            <param name="SourceId">ID of node activating activity.</param>
            <param name="Tags">Meta-data tags related to the event.</param>
        </member>
        <member name="M:TAG.Simulator.Model.IncActivityFinishedCount(System.String,System.String,System.TimeSpan,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Called when an activity is finished.
            </summary>
            <param name="ActivityId">Activity ID</param>
            <param name="SourceId">ID of node activating activity.</param>
            <param name="ElapsedTime">Elapsed time.</param>
            <param name="Tags">Meta-data tags related to the event.</param>
        </member>
        <member name="M:TAG.Simulator.Model.IncActivityErrorCount(System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Called when an activity is stopped, due to error.
            </summary>
            <param name="ActivityId">Activity ID</param>
            <param name="SourceId">ID of node activating activity.</param>
            <param name="ErrorMessage">Error message.</param>
            <param name="Tags">Meta-data tags related to the event.</param>
        </member>
        <member name="M:TAG.Simulator.Model.IncrementCounter(System.String)">
            <summary>
            Increments a counter
            </summary>
            <param name="CounterName">Counter name</param>
        </member>
        <member name="M:TAG.Simulator.Model.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output node</param>
        </member>
        <member name="M:TAG.Simulator.Model.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output node</param>
        </member>
        <member name="M:TAG.Simulator.Model.CreatePalette(System.Int32)">
            <summary>
            Creates a palette for graphs.
            </summary>
            <param name="N">Number of colors in palette.</param>
            <returns>Palette</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Action">
            <summary>
            Represents an action on an actor.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Action.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents an action on an actor.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Action.ActorId">
            <summary>
            Actor ID
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Action.ActionName">
            <summary>
            Action
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Action.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Action.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Action.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Action.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Action.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Action.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Activities">
            <summary>
            Container for activities.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activities.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Container for activities.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Activities.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activities.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Activity">
            <summary>
            Represents an activity that can be executed as the result of triggered events.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents an activity that can be executed as the result of triggered events.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Activity.Id">
            <summary>
            ID of activity.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Activity.ExecutionCount">
            <summary>
            Execution count
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Activity.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.Register(TAG.Simulator.ObjectModel.Activities.IActivityNode)">
            <summary>
            Registers a child activity node.
            </summary>
            <param name="Node">Activity node.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.ExecuteTask(Waher.Script.Variables)">
            <summary>
            Executes the activity.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.ExecuteActivity(Waher.Script.Variables,System.Collections.Generic.LinkedListNode{TAG.Simulator.ObjectModel.Activities.IActivityNode})">
            <summary>
            Executes an activity by executing a possibly branching sequence of nodes.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <param name="Start">Node to start execution with.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.ActivityNode">
            <summary>
            Abstract base class for activity nodes
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.ActivityNode.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for activity nodes
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.ActivityNode.Id">
            <summary>
            ID of activity node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.ActivityNode.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.ActivityNode.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.ActivityNode.Register(TAG.Simulator.ObjectModel.Activities.IActivityNode)">
            <summary>
            Registers a child activity node.
            </summary>
            <param name="Node">Activity node.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.ActivityNode.FirstNode">
            <summary>
            First child activity node.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.ActivityNode.Count">
            <summary>
            Number of registered activity nodes.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.ActivityNode.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.ActivityNode.Indent(System.IO.StreamWriter,System.Int32)">
            <summary>
            Adds indentation to the current row.
            </summary>
            <param name="Output">Output.</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.ActivityNode.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Argument">
            <summary>
            Defines an argument in an action.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Argument.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Defines an argument in an action.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Argument.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Argument.Name">
            <summary>
            Name of variable within the scope of the event.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Argument.Value">
            <summary>
            Value node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Argument.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Argument.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Argument.Register(TAG.Simulator.ObjectModel.Values.IValue)">
            <summary>
            Registers a value for the argument.
            </summary>
            <param name="Value">Value node</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Condition">
            <summary>
            Represents a condition.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Condition.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents a condition.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Condition.ConditionString">
            <summary>
            Condition string
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Condition.Expression">
            <summary>
            Parsed expression
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Condition.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Condition.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Condition.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Condition.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Condition.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Condition.IsTrue(Waher.Script.Variables)">
            <summary>
            If the node condition is true.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>If embedded nodes are to be executed.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Condition.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Boolean)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="First">If the condition is the first condition.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Conditional">
            <summary>
            Conditional execution in an activity.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Conditional.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Conditional execution in an activity.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Conditional.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Conditional.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Conditional.Register(TAG.Simulator.ObjectModel.Activities.IConditionNode)">
            <summary>
            Register a conditional node.
            </summary>
            <param name="Node">Conditional node</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Conditional.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Conditional.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Delay">
            <summary>
            Represents a delay in an activity.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Delay.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents a delay in an activity.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Delay.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Delay.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Delay.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Delay.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Delay.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Delay.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Eval">
            <summary>
            Executes script in an activity.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Eval.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents a delay in an activity.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Eval.Script">
            <summary>
            Script string
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Eval.Expression">
            <summary>
            Parsed expression
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Eval.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Eval.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Eval.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Eval.ParseChildren">
            <summary>
            If children are 
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Eval.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Eval.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Eval.ExportPlantUml(System.String,System.IO.StreamWriter,System.Int32,System.Boolean)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Script">Script expression.</param>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="Delimiters">If delimiters : and ; should be included at the beginning and end.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Finished">
            <summary>
            Terminates execution of activity.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Finished.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Terminates execution of activity.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Finished.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Finished.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Finished.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Finished.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.FinishedException">
            <summary>
            Exceptions thrown when the execution of an activity is completed.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.FinishedException.#ctor">
            <summary>
            Exceptions thrown when the execution of an activity is completed.
            </summary>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.GoTo">
            <summary>
            Jumps to another node in the activity.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.GoTo.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Jumps to another node in the activity.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.GoTo.Node">
            <summary>
            Referenced node
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.GoTo.Reference">
            <summary>
            Reference
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.GoTo.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.GoTo.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.GoTo.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.GoTo.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.GoTo.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.GoTo.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.IActivity">
            <summary>
            Interface for activities
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.IActivity.Id">
            <summary>
            ID of activity.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.IActivity.ExecutionCount">
            <summary>
            Execution count
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.IActivity.Register(TAG.Simulator.ObjectModel.Activities.IActivityNode)">
            <summary>
            Registers a child activity node.
            </summary>
            <param name="Node">Activity node.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.IActivity.ExecuteTask(Waher.Script.Variables)">
            <summary>
            Executes the activity.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.IActivityNode">
            <summary>
            Interface for activity nodes
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.IActivityNode.Id">
            <summary>
            ID of activity node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.IActivityNode.Register(TAG.Simulator.ObjectModel.Activities.IActivityNode)">
            <summary>
            Registers a child activity node.
            </summary>
            <param name="Node">Activity node.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.IActivityNode.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.IActivityNode.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.IConditionNode">
            <summary>
            Interface for condition nodes
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.IConditionNode.IsTrue(Waher.Script.Variables)">
            <summary>
            If the node condition is true.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>If embedded nodes are to be executed.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.IConditionNode.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Boolean)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="First">If the condition is the first condition.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Inc">
            <summary>
            Increments a counter.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Inc.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Increments a counter.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Inc.Counter">
            <summary>
            Counter name
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Inc.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Inc.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Inc.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Inc.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Inc.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Otherwise">
            <summary>
            Represents a condition that is always true.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Otherwise.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents a condition that is always true.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Otherwise.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Otherwise.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Otherwise.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Otherwise.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Otherwise.IsTrue(Waher.Script.Variables)">
            <summary>
            If the node condition is true.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>If embedded nodes are to be executed.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Otherwise.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Boolean)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="First">If the condition is the first condition.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Parallel">
            <summary>
            Executes multiple threads in parallel.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Parallel.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Executes multiple threads in parallel.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Parallel.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Parallel.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Parallel.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Parallel.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Start">
            <summary>
            Represents the starting point of the activity.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Start.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents the starting point of the activity.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Start.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Start.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Start.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Start.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Stop">
            <summary>
            Represents the stoping point of the activity.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Stop.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents the stoping point of the activity.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Stop.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Stop.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Stop.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Stop.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Thread">
            <summary>
            Represents a thread in parallel execution.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Thread.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents a thread in parallel execution.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Thread.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Thread.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Thread.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Actors.Actor">
            <summary>
            Abstract base class for actors
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for actors
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model,System.Int32,System.String)">
            <summary>
            Abstract base class for actors
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <param name="InstanceIndex">Instance index.</param>
            <param name="InstanceId">ID of instance</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.Actor.Id">
            <summary>
            ID of actor.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.Actor.InstanceId">
            <summary>
            ID of actor instance.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.Actor.N">
            <summary>
            Number of actors of this type specified.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.Actor.InstanceIndex">
            <summary>
            Actor instance index.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.Finalize">
            <summary>
            Finalizes the node after simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.CreateInstance(System.Int32,System.String)">
            <summary>
            Creates an instance of the actor.
            
            Note: Parent of newly created actor should point to this node (the creator of the instance object).
            </summary>
            <param name="InstanceIndex">Instance index.</param>
            <param name="InstanceId">ID of instance</param>
            <returns>Actor instance.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.InitializeInstance">
            <summary>
            Initializes an instance of an actor.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.StartInstance">
            <summary>
            Starts an instance of an actor.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.FinalizeInstance">
            <summary>
            Finalizes an instance of an actor.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.Register(TAG.Simulator.ObjectModel.Events.ExternalEvent)">
            <summary>
            Registers an external event on the actor.
            </summary>
            <param name="ExternalEvent">External event</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.TryGetExternalEvent(System.String,TAG.Simulator.ObjectModel.Events.ExternalEvent@)">
            <summary>
            Tries to get an external event, given its name.
            </summary>
            <param name="Name">Name of external event.</param>
            <param name="ExternalEvent">External event object.</param>
            <returns>If an external event with the corresponding name was found.</returns>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.Actor.FreeCount">
            <summary>
            Number of individuals in population that are free.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.GetFreeIndividual(System.Int32,System.Boolean)">
            <summary>
            Gets a free individual instance from the population.
            </summary>
            <param name="Index">Zero-based index of individual to get.</param>
            <param name="Exclusive">If individual is for exclusive use (i.e. will not be free once gotten, until returned).</param>
            <returns>Individual instance returned.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.ReturnIndividual(TAG.Simulator.ObjectModel.Actors.IActor)">
            <summary>
            Returns an individual to the population, once free again.
            </summary>
            <param name="Individual">Individual to return.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.Actor.ActivityObject">
            <summary>
            Returns the object that will be used by the actor for actions during an activity.
            </summary>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Actors.Actors">
            <summary>
            Container for actors.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actors.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Container for actors.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.Actors.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actors.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actors.Register(TAG.Simulator.ObjectModel.Actors.IActor)">
            <summary>
            Registers an actor with the collection of actors.
            </summary>
            <param name="Actor">Actor</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Actors.IActor">
            <summary>
            Basic interface for simulator nodes. Implementing this interface allows classes with default contructors to be used
            in simulator models.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.IActor.Id">
            <summary>
            ID of actor.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.IActor.InstanceId">
            <summary>
            ID of actor instance.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.IActor.Register(TAG.Simulator.ObjectModel.Events.ExternalEvent)">
            <summary>
            Registers an external event on the actor.
            </summary>
            <param name="ExternalEvent">External event</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.IActor.TryGetExternalEvent(System.String,TAG.Simulator.ObjectModel.Events.ExternalEvent@)">
            <summary>
            Tries to get an external event, given its name.
            </summary>
            <param name="Name">Name of external event.</param>
            <param name="ExternalEvent">External event object.</param>
            <returns>If an external event with the corresponding name was found.</returns>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.IActor.FreeCount">
            <summary>
            Number of individuals in population that are free.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.IActor.GetFreeIndividual(System.Int32,System.Boolean)">
            <summary>
            Gets a free individual instance from the population.
            </summary>
            <param name="Index">Zero-based index of individual to get.</param>
            <param name="Exclusive">If individual is for exclusive use (i.e. will not be free once gotten, until returned).</param>
            <returns>Individual instance returned.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.IActor.ReturnIndividual(TAG.Simulator.ObjectModel.Actors.IActor)">
            <summary>
            Returns an individual to the population, once free again.
            </summary>
            <param name="Individual">Individual to return.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.IActor.ActivityObject">
            <summary>
            Returns the object that will be used by the actor for actions during an activity.
            </summary>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Actors.IActors">
            <summary>
            Interface for collections of actors.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.IActors.Register(TAG.Simulator.ObjectModel.Actors.IActor)">
            <summary>
            Registers an actor with the collection of actors.
            </summary>
            <param name="Actor">Actor</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Distributions.Distribution">
            <summary>
            Abstract base class for distributions
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distribution.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for distributions
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Distribution.Id">
            <summary>
            ID of distribution.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Distribution.N">
            <summary>
            Intensity/Frequency/Factor
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Distribution.TimeCycleUnits">
            <summary>
            Time cycle, in number of <see cref="P:TAG.Simulator.Model.TimeUnit"/>.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distribution.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distribution.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distribution.CheckTrigger(System.Double,System.Double,System.Int32)">
            <summary>
            Check if distribution has a sample within the time period.
            </summary>
            <param name="t1">Starting time of period.</param>
            <param name="t2">Ending time of period.</param>
            <param name="NrCycles">Number of time cycles completed.</param>
            <returns>How many times samples were found in time period.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distribution.GetCumulativeProbability(System.Double,System.Int32)">
            <summary>
            The Cumulative Distribution Function (CDF) of the distribution, excluding intensity (<see cref="P:TAG.Simulator.ObjectModel.Distributions.Distribution.N"/>).
            </summary>
            <param name="t">Time</param>
            <param name="NrCycles">Number of time cycles completed.</param>
            <returns>CDU(t)</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Distributions.Distributions">
            <summary>
            Container for distributions.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distributions.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Container for distributions.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Distributions.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distributions.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Distributions.IDistribution">
            <summary>
            Interface for distributions
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.IDistribution.Id">
            <summary>
            ID of distribution.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.IDistribution.CheckTrigger(System.Double,System.Double,System.Int32)">
            <summary>
            Check if distribution has a sample within the time period.
            </summary>
            <param name="t1">Starting time of period.</param>
            <param name="t2">Ending time of period.</param>
            <param name="NrCycles">Number of time cycles completed.</param>
            <returns>How many times samples were found in time period.</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Distributions.Normal">
            <summary>
            Normal distribution
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Normal.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Normal distribution
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Normal.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Normal.Mean">
            <summary>
            μ
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Normal.StdDev">
            <summary>
            σ
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Normal.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Normal.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Normal.Erf(System.Double)">
            <summary>
            Statistical error function erf(z), for real-valued arguments.
            </summary>
            <param name="x">Real-valued argument</param>
            <returns>erf(x)</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Normal.GetCumulativeProbability(System.Double,System.Int32)">
            <summary>
            The Cumulative Distribution Function (CDF) of the distribution, excluding intensity (<see cref="P:TAG.Simulator.ObjectModel.Distributions.Distribution.N"/>).
            </summary>
            <param name="t">Time</param>
            <param name="NrCycles">Number of time cycles completed.</param>
            <returns>CDU(t)</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Distributions.Uniform">
            <summary>
            Uniform distribution
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Uniform.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Uniform distribution
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Uniform.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Uniform.From">
            <summary>
            From
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Uniform.To">
            <summary>
            To
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Uniform.Inverted">
            <summary>
            If the interval is inverted (with respect to the model time cycle).
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Uniform.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Uniform.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Uniform.GetCumulativeProbability(System.Double,System.Int32)">
            <summary>
            The Cumulative Distribution Function (CDF) of the distribution, excluding intensity (<see cref="P:TAG.Simulator.ObjectModel.Distributions.Distribution.N"/>).
            </summary>
            <param name="t">Time</param>
            <param name="NrCycles">Number of time cycles completed.</param>
            <returns>CDU(t)</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.ActorReference">
            <summary>
            References a population of actors.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ActorReference.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            References a population of actors.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ActorReference.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ActorReference.Name">
            <summary>
            Name of actor within the scope of the event.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ActorReference.Exclusive">
            <summary>
            If the actor is referenced for exclusive use in the event (i.e. cannot participate in another event at the same time).
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ActorReference.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ActorReference.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ActorReference.Register(TAG.Simulator.ObjectModel.Actors.IActor)">
            <summary>
            Registers an actor with the collection of actors.
            </summary>
            <param name="Actor">Actor</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ActorReference.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ActorReference.Prepare(Waher.Script.Variables,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Prepares <paramref name="Variables"/> for the execution of an event.
            </summary>
            <param name="Variables">Event variables</param>
            <param name="Tags">Extensible list of meta-data tags related to the event.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ActorReference.Release(Waher.Script.Variables)">
            <summary>
            Releases resources at the end of an event.
            </summary>
            <param name="Variables">Event variables</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.Event">
            <summary>
            Abstract base class for events
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Event.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for events
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Event.Id">
            <summary>
            ID of event.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Event.ActivityId">
            <summary>
            ID of Activity to execute when event is triggered.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Event.Activity">
            <summary>
            Activity to execute when event is triggered.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Event.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Event.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Event.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Event.Register(TAG.Simulator.ObjectModel.Events.IEventPreparation)">
            <summary>
            Registers an event preparation node.
            </summary>
            <param name="PreparationNode">Preparation node.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Event.Trigger(Waher.Script.Variables)">
            <summary>
            Triggers the event.
            </summary>
            <param name="Variables">Event variables</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.EventHandler">
            <summary>
            External Event
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventHandler.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            External Event
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.EventHandler.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventHandler.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.EventPreparation">
            <summary>
            Abstract base class for event preparation nodes (with children).
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventPreparation.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for event preparation nodes (with children).
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventPreparation.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventPreparation.Prepare(Waher.Script.Variables,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Prepares <paramref name="Variables"/> for the execution of an event.
            </summary>
            <param name="Variables">Event variables</param>
            <param name="Tags">Extensible list of meta-data tags related to the event.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventPreparation.Release(Waher.Script.Variables)">
            <summary>
            Releases resources at the end of an event.
            </summary>
            <param name="Variables">Event variables</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.Events">
            <summary>
            Container for events.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Events.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Container for events.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Events.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Events.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.ExternalEvent">
            <summary>
            Handles an incoming event raised from an external source
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ExternalEvent.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Handles an incoming event raised from an external source
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ExternalEvent.Name">
            <summary>
            Name of external event
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ExternalEvent.EventId">
            <summary>
            Optional name for variable, if different from <see cref="P:TAG.Simulator.ObjectModel.Events.ExternalEvent.Name"/>
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ExternalEvent.ActorName">
            <summary>
            Optional name for actor variable reference of sender of external event.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ExternalEvent.Event">
            <summary>
            Referenced event object.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ExternalEvent.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ExternalEvent.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ExternalEvent.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ExternalEvent.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ExternalEvent.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ExternalEvent.Register(TAG.Simulator.ObjectModel.Events.Parameter)">
            <summary>
            Registers a parameter with the external event.
            </summary>
            <param name="Parameter">Parameter</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ExternalEvent.Trigger(TAG.Simulator.ObjectModel.Actors.IActor,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Method called when an external event has been received.
            </summary>
            <param name="Source">Actor receiving the event.</param>
            <param name="Arguments">Event arguments.</param>
            <returns>If event was handled</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.FromPopulation">
            <summary>
            References a specific population of actors.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.FromPopulation.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            References a specific population of actors.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.FromPopulation.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.FromPopulation.ActorId">
            <summary>
            Name of actor defining the population.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.FromPopulation.Actor">
            <summary>
            Referenced actor.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.FromPopulation.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.FromPopulation.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.FromPopulation.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.IEvent">
            <summary>
            Interface for events
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.IEvent.Id">
            <summary>
            ID of event.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.IEvent.Trigger(Waher.Script.Variables)">
            <summary>
            Triggers the event.
            </summary>
            <param name="Variables">Event variables</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.IEvent.Register(TAG.Simulator.ObjectModel.Events.IEventPreparation)">
            <summary>
            Registers an event preparation node.
            </summary>
            <param name="PreparationNode">Preparation node.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.IEventPreparation">
            <summary>
            Interface for event preparation nodes
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.IEventPreparation.Prepare(Waher.Script.Variables,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Prepares <paramref name="Variables"/> for the execution of an event.
            </summary>
            <param name="Variables">Event variables</param>
            <param name="Tags">Extensible list of meta-data tags related to the event.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.IEventPreparation.Release(Waher.Script.Variables)">
            <summary>
            Releases resources at the end of an event.
            </summary>
            <param name="Variables">Event variables</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.ITimeTriggerEvent">
            <summary>
            Interface for events that can be triggered by elapsed time.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ITimeTriggerEvent.CheckTrigger(System.Double,System.Double,System.Int32)">
            <summary>
            Check if event is triggered during a time period.
            </summary>
            <param name="t1">Starting time of period.</param>
            <param name="t2">Ending time of period.</param>
            <param name="NrCycles">Number of time cycles completed.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.Parameter">
            <summary>
            Sets a variable to the value of an event parameter.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Parameter.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Sets a variable to the value of an event parameter.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Parameter.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Parameter.Name">
            <summary>
            Name of external event
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Parameter.Variable">
            <summary>
            Optional name for variable, if different from <see cref="P:TAG.Simulator.ObjectModel.Events.Parameter.Name"/>
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Parameter.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Parameter.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Parameter.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.SetVariable">
            <summary>
            Sets a variable value when an event is triggered.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.SetVariable.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Sets a variable value when an event is triggered.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.SetVariable.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.SetVariable.Name">
            <summary>
            Name of variable within the scope of the event.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.SetVariable.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.SetVariable.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.SetVariable.Register(TAG.Simulator.ObjectModel.Values.IValue)">
            <summary>
            Registers a value for the argument.
            </summary>
            <param name="Value">Value node</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.SetVariable.Prepare(Waher.Script.Variables,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Prepares <paramref name="Variables"/> for the execution of an event.
            </summary>
            <param name="Variables">Event variables</param>
            <param name="Tags">Extensible list of meta-data tags related to the event.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.SetVariable.Release(Waher.Script.Variables)">
            <summary>
            Releases resources at the end of an event.
            </summary>
            <param name="Variables">Event variables</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.StochasticEvent">
            <summary>
            Stochastic Event
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.StochasticEvent.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Stochastic Event
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.StochasticEvent.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.StochasticEvent.DistributionId">
            <summary>
            ID of Distribution
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.StochasticEvent.Distribution">
            <summary>
            Distribution
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.StochasticEvent.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.StochasticEvent.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.StochasticEvent.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.StochasticEvent.CheckTrigger(System.Double,System.Double,System.Int32)">
            <summary>
            Check if event is triggered during a time period.
            </summary>
            <param name="t1">Starting time of period.</param>
            <param name="t2">Ending time of period.</param>
            <param name="NrCycles">Number of time cycles completed.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.MetaData.Description">
            <summary>
            Description of model
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Description.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Description of model
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.Description.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.Description.DescriptionString">
            <summary>
            Description string
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Description.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Description.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Description.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output node</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Description.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output node</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.MetaData.Meta">
            <summary>
            Node that contains meta-data about the model.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Meta.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Node that contains meta-data about the model.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.Meta.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Meta.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Meta.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output node</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Meta.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output node</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.MetaData.Title">
            <summary>
            Title of model
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Title.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Title of model
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.Title.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.Title.TitleString">
            <summary>
            Title string
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Title.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Title.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Title.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output node</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Title.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output node</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.SimulationNode">
            <summary>
            Abstract base class for simulation nodes
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for simulation nodes
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.SimulationNode.Parent">
            <summary>
            Parent node in the simulation model.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.SimulationNode.Model">
            <summary>
            Model in which the node is defined.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.SimulationNode.Namespace">
            <summary>
            XML Namespace where the element is defined.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.SimulationNode.SchemaResource">
            <summary>
            Points to the embedded XML Schema resource defining the semantics of the XML namespace.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.SimulationNode.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.ForEach(TAG.Simulator.ForEachCallbackMethod,System.Boolean)">
            <summary>
            Evaluates <paramref name="Method"/> on each node in the subtree defined by the current node.
            </summary>
            <param name="Method">Method to call.</param>
            <param name="DepthFirst">If children are iterated before parents.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.Finalize">
            <summary>
            Finalizes the node after simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output node</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output node</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.SimulationNodeChildren">
            <summary>
            Abstract base class for simulation nodes with children
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNodeChildren.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for simulation nodes
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.SimulationNodeChildren.Children">
            <summary>
            Child nodes.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNodeChildren.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.SimulationNodeChildren.ParseChildren">
            <summary>
            If children are 
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNodeChildren.ForEach(TAG.Simulator.ForEachCallbackMethod,System.Boolean)">
            <summary>
            Evaluates <paramref name="Method"/> on each node in the subtree defined by the current node.
            </summary>
            <param name="Method">Method to call.</param>
            <param name="DepthFirst">If children are iterated before parents.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNodeChildren.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output node</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNodeChildren.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output node</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Structure.Assemblies">
            <summary>
            Container for assemblies.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Structure.Assemblies.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Container for assemblies.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Structure.Assemblies.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Structure.Assemblies.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Structure.Assembly">
            <summary>
            Assembly reference.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Structure.Assembly.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Assembly reference.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Structure.Assembly.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Structure.Assembly.FileName">
            <summary>
            Filename of assembly.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Structure.Assembly.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Structure.Assembly.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.DateTime">
            <summary>
            DateTime value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.DateTime.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            DateTime value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.DateTime.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.DateTime.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.DateTime.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.DateTime.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.DateTime.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.DateTime.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.Duration">
            <summary>
            Duration value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Duration.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Duration value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Duration.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Duration.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Duration.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Duration.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Duration.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Duration.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Duration.ExportText(Waher.Content.Duration,System.IO.StreamWriter)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Duration">Duration value.</param>
            <param name="Output">Output node</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.IValue">
            <summary>
            Interface for values
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.IValue.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.IValue.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.IValueRecipient">
            <summary>
            Interface for nodes holding a value node
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.IValueRecipient.Register(TAG.Simulator.ObjectModel.Values.IValue)">
            <summary>
            Registers a value for the argument.
            </summary>
            <param name="Value">Value node</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.Number">
            <summary>
            Number value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Number.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Number value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Number.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Number.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Number.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Number.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Number.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Number.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.Script">
            <summary>
            Value defined by script.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Script.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class of values
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Script.ScriptString">
            <summary>
            Script string
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Script.Expression">
            <summary>
            Parsed expression
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Script.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Script.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Script.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Script.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Script.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.String">
            <summary>
            String value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.String.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            String value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.String.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.String.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.String.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.String.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.String.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.String.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.Time">
            <summary>
            Time value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Time.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Time value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Time.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Time.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Time.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Time.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Time.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Time.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.Value">
            <summary>
            Abstract base class for values
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Value.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for values
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Value.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Value.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Value.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.Variable">
            <summary>
            Value defined by variable.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Variable.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Value defined by variable.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Variable.Name">
            <summary>
            Variable name
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Variable.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Variable.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Variable.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Variable.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Variable.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.Xml">
            <summary>
            XML value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Xml.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            String value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Xml.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Xml.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Xml.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Xml.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Xml.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Xml.ExportPlantUml(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output node</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.Statistics.Bucket">
            <summary>
            Statistical bucket
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.#ctor(System.String,System.Boolean,System.DateTime,Waher.Content.Duration)">
            <summary>
            Statistical bucket
            </summary>
            <param name="Id">ID of bucket.</param>
            <param name="CalcStdDev">If standard deviation is to be calculated.</param>
            <param name="StartTime">Starting time</param>
            <param name="BucketTime">Duration of one bucket, where statistics is collected.</param>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.Id">
            <summary>
            Bucket ID
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.Count">
            <summary>
            Counter
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.Sum">
            <summary>
            Sum of samples.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.Min">
            <summary>
            Smallest sample
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.Max">
            <summary>
            Largest sample
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.Mean">
            <summary>
            Mean (average) value of samples.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.Inc">
            <summary>
            Increments counter.
            </summary>
            <returns>Start time of bucket that was incremented.</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.Sample(System.Double)">
            <summary>
            Adds a sample
            </summary>
            <param name="Value">Sample value reported</param>
            <returns>Start time of bucket to which the value was reported.</returns>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.Variance">
            <summary>
            Variance of samples
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.StdDev">
            <summary>
            (Biased) standard deviation of samples
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.Flush">
            <summary>
            Terminates the ongoing collection of data.
            </summary>
        </member>
        <member name="T:TAG.Simulator.Statistics.Buckets">
            <summary>
            A collection of buckets
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.#ctor(System.DateTime,Waher.Content.Duration)">
            <summary>
            A collection of buckets
            </summary>
            <param name="StartTime">Starting time</param>
            <param name="BucketTime">Duration of one bucket, where statistics is collected.</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.Inc(System.String)">
            <summary>
            Increments a counter.
            </summary>
            <param name="Counter">Counter ID</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.Sample(System.String,System.Double)">
            <summary>
            Samples a value
            </summary>
            <param name="Counter">Counter ID</param>
            <param name="Value">Value</param>
        </member>
        <member name="P:TAG.Simulator.Statistics.Buckets.Count">
            <summary>
            Number of counters
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.GetTable">
            <summary>
            Gets a count table of registered counters.
            </summary>
            <returns>Count table</returns>
        </member>
        <member name="T:TAG.Simulator.Statistics.CountTable">
            <summary>
            Represents a simple count table
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.CountTable.#ctor">
            <summary>
            Represents a simple count table
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.CountTable.Add(System.String,System.Int64)">
            <summary>
            Adds a record to the table.
            </summary>
            <param name="Id">Count ID</param>
            <param name="Count">Count</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.CountTable.SetFgColor(System.String,System.String)">
            <summary>
            Sets the foreground color for a record.
            </summary>
            <param name="Id">Record ID</param>
            <param name="Color">String representation of color</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.CountTable.SetBgColor(System.String,System.String)">
            <summary>
            Sets the background color for a record.
            </summary>
            <param name="Id">Record ID</param>
            <param name="Color">String representation of color</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.CountTable.ExportTableMarkdown(System.IO.StreamWriter,System.String,System.String,System.String)">
            <summary>
            Exports data as a Markdown Table
            </summary>
            <param name="Output">Output node</param>
            <param name="Header">Header string</param>
            <param name="Title">Title string</param>
            <param name="Id">Table ID</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.CountTable.ExportTableGraph(System.IO.StreamWriter,System.String)">
            <summary>
            Exports data as a graph embedded in markdown
            </summary>
            <param name="Output">Markdown output</param>
            <param name="Title">Title string</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.CountTable.ExportXml(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Exports data to XML
            </summary>
            <param name="Output">XML Output</param>
            <param name="TableElement">XML Table element name.</param>
            <param name="RowElement">XML Row element name.</param>
        </member>
        <member name="T:TAG.Simulator.Statistics.EventStatistics">
            <summary>
            Basic event statistics
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.EventStatistics.#ctor(System.DateTime,Waher.Content.Duration)">
            <summary>
            Basic event statistics
            </summary>
            <param name="StartTime">Starting time</param>
            <param name="BucketTime">Duration of one bucket, where statistics is collected.</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.EventStatistics.Queue(Waher.Events.Event)">
            <summary>
            Processes an event.
            </summary>
            <param name="Event">Event</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.EventStatistics.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports accumulated statistics to markdown
            </summary>
            <param name="Output">Markdown output</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.EventStatistics.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports accumulated statistics to XML
            </summary>
            <param name="Output">XML output</param>
        </member>
        <member name="T:TAG.Simulator.Statistics.Statistic">
            <summary>
            Represents collected statistical information from a small portion of time.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.Statistic.#ctor(System.DateTime,System.DateTime,System.Int64,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Represents collected statistical information from a small portion of time.
            </summary>
            <param name="Start">Start of period.</param>
            <param name="Stop">End of period.</param>
            <param name="Count">Number of events</param>
            <param name="Mean">Mean value</param>
            <param name="Variance">Variance of values</param>
            <param name="StdDev">Standard deviation of values</param>
            <param name="Min">Smallest value</param>
            <param name="Max">Largest value</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Statistic.#ctor(System.DateTime,System.DateTime,System.Int64,System.Double,System.Double,System.Double)">
            <summary>
            Represents collected statistical information from a small portion of time.
            </summary>
            <param name="Start">Start of period.</param>
            <param name="Stop">End of period.</param>
            <param name="Count">Number of events</param>
            <param name="Mean">Mean value</param>
            <param name="Min">Smallest value</param>
            <param name="Max">Largest value</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Statistic.#ctor(System.DateTime,System.DateTime,System.Int64)">
            <summary>
            Represents collected statistical information from a small portion of time.
            </summary>
            <param name="Start">Start of period.</param>
            <param name="Stop">End of period.</param>
            <param name="Count">Number of events</param>
        </member>
        <member name="P:TAG.Simulator.Statistics.Statistic.Start">
            <summary>
            Start of period.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Statistic.Stop">
            <summary>
            End of period.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Statistic.Count">
            <summary>
            Number of events
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Statistic.Mean">
            <summary>
            Mean value
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Statistic.Variance">
            <summary>
            Variance of values
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Statistic.StdDev">
            <summary>
            Standard deviation of values
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Statistic.Min">
            <summary>
            Smallest value
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Statistic.Max">
            <summary>
            Largest value
            </summary>
        </member>
    </members>
</doc>
