<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TAG.Simulator</name>
    </assembly>
    <members>
        <member name="T:TAG.Simulator.Events.KeyEventHandler">
            <summary>
            Delegate for key event handlers.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:TAG.Simulator.Events.KeyEventArgs">
            <summary>
            Event arguments for key events.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Events.KeyEventArgs.#ctor(System.String,System.String)">
            <summary>
            Event arguments for key events.
            </summary>
            <param name="Name">Key name.</param>
            <param name="LookupValue">Lookup value.</param>
        </member>
        <member name="P:TAG.Simulator.Events.KeyEventArgs.Name">
            <summary>
            Key name
            </summary>
        </member>
        <member name="P:TAG.Simulator.Events.KeyEventArgs.LookupValue">
            <summary>
            Key lookup value.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Events.KeyEventArgs.Value">
            <summary>
            Key value
            </summary>
        </member>
        <member name="T:TAG.Simulator.Events.ThreadCountEventHandler">
            <summary>
            Delegate for thread count event handlers.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:TAG.Simulator.Events.ThreadCountEventArgs">
            <summary>
            Event arguments for thread count events.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Events.ThreadCountEventArgs.#ctor">
            <summary>
            Event arguments for thread count events.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Events.ThreadCountEventArgs.Count">
            <summary>
            Number of threads of the current process.
            </summary>
        </member>
        <member name="T:TAG.Simulator.Factory">
            <summary>
            Factory of simulation objects.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Factory.Initialize">
            <summary>
            Initializes the factory
            </summary>
        </member>
        <member name="M:TAG.Simulator.Factory.TryGetSchemaResource(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Reflection.Assembly}@)">
            <summary>
            Tries to get the embedded resource name of the schema defining a namespace, and the corresponding assembly.
            </summary>
            <param name="Namespace">Namespace</param>
            <param name="Result">Embedded resource name and assembly.</param>
            <returns>If the namespace was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Factory.Create(System.Xml.XmlElement,TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a simulation objected, based on its XML definition.
            </summary>
            <param name="Definition">XML definition.</param>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>Created simulation object</returns>
        </member>
        <member name="T:TAG.Simulator.ForEachCallbackMethod">
            <summary>
            Callback method for iteration across the simulation model.
            </summary>
            <param name="Node">Current node being processed.</param>
        </member>
        <member name="T:TAG.Simulator.ISimulationNode">
            <summary>
            Basic interface for simulator nodes. Implementing this interface allows classes with default contructors to be used
            in simulator models.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ISimulationNode.Parent">
            <summary>
            Parent node in the simulation model.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ISimulationNode.Namespace">
            <summary>
            XML Namespace where the element is defined.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ISimulationNode.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ISimulationNode.SchemaResource">
            <summary>
            Points to the embedded XML Schema resource defining the semantics of the XML namespace.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ISimulationNode.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model owning the node.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ISimulationNode.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ISimulationNode.ForEach(TAG.Simulator.ForEachCallbackMethod,System.Boolean)">
            <summary>
            Evaluates <paramref name="Method"/> on each node in the subtree defined by the current node.
            </summary>
            <param name="Method">Method to call.</param>
            <param name="DepthFirst">If children are iterated before parents.</param>
        </member>
        <member name="M:TAG.Simulator.ISimulationNode.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ISimulationNode.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ISimulationNode.Finalize">
            <summary>
            Finalizes the node after simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ISimulationNode.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:TAG.Simulator.ISimulationNode.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="T:TAG.Simulator.ISimulationNodeChildren">
            <summary>
            Basic interface for simulator nodes with child nodes.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ISimulationNodeChildren.Children">
            <summary>
            Child nodes.
            </summary>
        </member>
        <member name="T:TAG.Simulator.TimeBase">
            <summary>
            Base of simulation time
            </summary>
        </member>
        <member name="F:TAG.Simulator.TimeBase.StartOfSimulation">
            <summary>
            00:00:00 equals start of simulation.
            </summary>
        </member>
        <member name="F:TAG.Simulator.TimeBase.ComputerClock">
            <summary>
            Time/Date equals computer time/date.
            </summary>
        </member>
        <member name="T:TAG.Simulator.Model">
            <summary>
            Root node of a simulation model
            </summary>
        </member>
        <member name="M:TAG.Simulator.Model.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Root node of a simulation model
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="F:TAG.Simulator.Model.ComSimNamespace">
            <summary>
            http://trustanchorgroup.com/Schema/ComSim.xsd
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.TimeBase">
            <summary>
            Base of simulation time
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.TimeUnit">
            <summary>
            Time unit
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.TimeUnitStr">
            <summary>
            Time unit string
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.TimeUnitMs">
            <summary>
            Time unit, in milliseconds
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.TimeCycle">
            <summary>
            Time cycle
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.TimeCycleMs">
            <summary>
            Time cycle, in milliseconds
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.TimeCycleUnits">
            <summary>
            Time cycle, in number of <see cref="P:TAG.Simulator.Model.TimeUnit"/>.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.Duration">
            <summary>
            Simulation duration
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.BucketTime">
            <summary>
            Time to collect events, for statistical purposes.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.BucketTimeMs">
            <summary>
            Bucket time, in milliseconds
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.StartTime">
            <summary>
            Start time
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.EndTime">
            <summary>
            End time
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.Variables">
            <summary>
            Model variables.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.SnifferFolder">
            <summary>
            Folder used for sniffer output.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.SnifferTransformFileName">
            <summary>
            Sniffer XSLT file to use to transform sniffer output.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Model.CommandLine">
            <summary>
            Command-line string used to execute simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Model.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.Model.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.Model.DurationToString(Waher.Content.Duration)">
            <summary>
            Converts a duration to a string.
            </summary>
            <param name="Duration"></param>
            <returns>String representation of duration.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Model.Finalize">
            <summary>
            Finalizes the node after simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Model.Register(TAG.Simulator.ObjectModel.Distributions.IDistribution)">
            <summary>
            Registers a distribution with the runtime environment of the model.
            </summary>
            <param name="Distribution">Distribution object.</param>
        </member>
        <member name="M:TAG.Simulator.Model.TryGetDistribution(System.String,TAG.Simulator.ObjectModel.Distributions.IDistribution@)">
            <summary>
            Tries to get a registered distribution from the model.
            </summary>
            <param name="Id">ID of distribution.</param>
            <param name="Distribution">Distribution if found.</param>
            <returns>If a distribution was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.Register(TAG.Simulator.ObjectModel.Actors.IActor)">
            <summary>
            Registers a actor with the runtime environment of the model.
            </summary>
            <param name="Actor">Actor object.</param>
        </member>
        <member name="M:TAG.Simulator.Model.TryGetActor(System.String,TAG.Simulator.ObjectModel.Actors.IActor@)">
            <summary>
            Tries to get a registered actor from the model.
            </summary>
            <param name="Id">ID of actor.</param>
            <param name="Actor">Actor if found.</param>
            <returns>If an actor was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.Register(TAG.Simulator.ObjectModel.Events.IEvent)">
            <summary>
            Registers a event with the runtime environment of the model.
            </summary>
            <param name="Event">Event object.</param>
        </member>
        <member name="M:TAG.Simulator.Model.TryGetEvent(System.String,TAG.Simulator.ObjectModel.Events.IEvent@)">
            <summary>
            Tries to get a registered event from the model.
            </summary>
            <param name="Id">ID of event.</param>
            <param name="Event">Event if found.</param>
            <returns>If an event was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.Register(TAG.Simulator.ObjectModel.Activities.IActivity)">
            <summary>
            Registers a activity with the runtime environment of the model.
            </summary>
            <param name="Activity">Activity object.</param>
        </member>
        <member name="M:TAG.Simulator.Model.TryGetActivity(System.String,TAG.Simulator.ObjectModel.Activities.IActivity@)">
            <summary>
            Tries to get a registered activity from the model.
            </summary>
            <param name="Id">ID of activity.</param>
            <param name="Activity">Activity if found.</param>
            <returns>If an activity was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.Register(System.Collections.Generic.LinkedListNode{TAG.Simulator.ObjectModel.Activities.IActivityNode})">
            <summary>
            Registers a activity node with the runtime environment of the model.
            </summary>
            <param name="ActivityNode">ActivityNode object.</param>
        </member>
        <member name="M:TAG.Simulator.Model.TryGetActivityNode(System.String,System.Collections.Generic.LinkedListNode{TAG.Simulator.ObjectModel.Activities.IActivityNode}@)">
            <summary>
            Tries to get a registered activity node from the model.
            </summary>
            <param name="Id">ID of activity node.</param>
            <param name="ActivityNode">ActivityNode if found.</param>
            <returns>If an activity node was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.Register(TAG.Simulator.ObjectModel.Graphs.IGraph)">
            <summary>
            Registers a graph with the runtime environment of the model.
            </summary>
            <param name="Graph">Graph object.</param>
        </member>
        <member name="M:TAG.Simulator.Model.TryGetGraph(System.String,TAG.Simulator.ObjectModel.Graphs.IGraph@)">
            <summary>
            Tries to get a registered graph from the model.
            </summary>
            <param name="For">ID of entity the graph would be for.</param>
            <param name="Graph">Graph if found.</param>
            <returns>If a graph was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.TryGetSampleGraph(System.String,TAG.Simulator.ObjectModel.Graphs.IGraph@)">
            <summary>
            Tries to get a registered sample graph from the model.
            </summary>
            <param name="For">ID of entity the graph would be for.</param>
            <param name="Graph">Graph if found.</param>
            <returns>If a graph was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.TryGetCounterGraph(System.String,TAG.Simulator.ObjectModel.Graphs.IGraph@)">
            <summary>
            Tries to get a registered counter graph from the model.
            </summary>
            <param name="For">ID of entity the graph would be for.</param>
            <param name="Graph">Graph if found.</param>
            <returns>If a graph was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.TryGetExecutionsGraph(System.String,TAG.Simulator.ObjectModel.Graphs.IGraph@)">
            <summary>
            Tries to get a registered executuions graph from the model.
            </summary>
            <param name="For">ID of entity the graph would be for.</param>
            <param name="Graph">Graph if found.</param>
            <returns>If a graph was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.TryGetExecutionTimesGraph(System.String,TAG.Simulator.ObjectModel.Graphs.IGraph@)">
            <summary>
            Tries to get a registered executuion times graph from the model.
            </summary>
            <param name="For">ID of entity the graph would be for.</param>
            <param name="Graph">Graph if found.</param>
            <returns>If a graph was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.RegisterCustomSampleGraph(System.String,TAG.Simulator.ObjectModel.Graphs.IGraph)">
            <summary>
            Registers a custom samples graph
            </summary>
            <param name="Id">ID of graph</param>
            <param name="Graph">Graph</param>
        </member>
        <member name="M:TAG.Simulator.Model.RegisterCustomCounterGraph(System.String,TAG.Simulator.ObjectModel.Graphs.IGraph)">
            <summary>
            Registers a custom counter graph
            </summary>
            <param name="Id">ID of graph</param>
            <param name="Graph">Graph</param>
        </member>
        <member name="M:TAG.Simulator.Model.RegisterCustomExecutionsGraph(System.String,TAG.Simulator.ObjectModel.Graphs.IGraph)">
            <summary>
            Registers a custom executions graph
            </summary>
            <param name="Id">ID of graph</param>
            <param name="Graph">Graph</param>
        </member>
        <member name="M:TAG.Simulator.Model.RegisterCustomExecutionTimesGraph(System.String,TAG.Simulator.ObjectModel.Graphs.IGraph)">
            <summary>
            Registers a custom execution times graph
            </summary>
            <param name="Id">ID of graph</param>
            <param name="Graph">Graph</param>
        </member>
        <member name="M:TAG.Simulator.Model.TryGetSampleBucket(System.String,TAG.Simulator.Statistics.IBucket@)">
            <summary>
            Tries to get a sample bucket, given its ID.
            </summary>
            <param name="Id">Bucket ID</param>
            <param name="Bucket">Bucket, if found.</param>
            <returns>If a bucket with the given ID was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.GetSampleBucket(System.String)">
            <summary>
            Gets a sample bucket, given its ID.
            </summary>
            <param name="Id">Bucket ID</param>
            <returns>Sample bucket.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.GetActivityStartBucket(System.String)">
            <summary>
            Gets a activity start bucket, given its ID.
            </summary>
            <param name="Id">Bucket ID</param>
            <returns>Activity Start bucket.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.GetActivityTimeBucket(System.String)">
            <summary>
            Gets a activity time bucket, given its ID.
            </summary>
            <param name="Id">Bucket ID</param>
            <returns>Activity Time bucket.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.Run(System.Threading.Tasks.TaskCompletionSource{System.Boolean},System.Boolean)">
            <summary>
            Runs the simulation.
            </summary>
            <param name="Done">Task completion source, that can be set by external events.</param>
            <param name="EmitDots">If dots should be emitted to the console to mark the passage of time.</param>
            <returns>If simulation completed successfully.</returns>
        </member>
        <member name="E:TAG.Simulator.Model.OnInitializing">
            <summary>
            Event raised when model is being initialized.
            </summary>
        </member>
        <member name="E:TAG.Simulator.Model.OnStarting">
            <summary>
            Event raised when model is being started.
            </summary>
        </member>
        <member name="E:TAG.Simulator.Model.OnRunning">
            <summary>
            Event raised when model is about to run.
            </summary>
        </member>
        <member name="E:TAG.Simulator.Model.OnFinalizing">
            <summary>
            Event raised when model is being finalized.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Model.GetTimeCoordinates(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to uncycled (linear) time coordinates.
            </summary>
            <param name="TP">Timepoint</param>
            <returns>Corresponding linear time coordinates.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.GetRandomBytes(System.Int32)">
            <summary>
            Gets an array of random bytes.
            </summary>
            <param name="NrBytes">Number of random bytes to generate.</param>
            <returns>Random bytes.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.GetRandomDouble">
            <summary>
            Generates a new floating-point value between 0 and 1, using a cryptographic random number generator.
            </summary>
            <returns>Random number.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.GetRandomInteger(System.Int32)">
            <summary>
            Generates a new random integer between 0 (inclusive) and <paramref name="MaxValueExclusive"/> (exclusive).
            </summary>
            <param name="MaxValueExclusive">Maximum value (exclusive)</param>
            <returns>Random integer value 0 - <paramref name="MaxValueExclusive"/>-1.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.GetKey(System.String,System.String)">
            <summary>
            Gets a key from the database. If it does not exist, it prompts the user for input.
            </summary>
            <param name="KeyName">Name of key.</param>
            <param name="LookupValue">Lookup value. Can be used to return different values for different keys, and for importing keys.</param>
            <returns>Value of key.</returns>
        </member>
        <member name="E:TAG.Simulator.Model.OnGetKey">
            <summary>
            Event raised when the model needs a key from the system.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Model.GetSniffer(System.String)">
            <summary>
            Gets a sniffer, if sniffer output is desired.
            </summary>
            <param name="Actor">Actor</param>
            <returns>Sniffer, if any, null otherwise.</returns>
        </member>
        <member name="M:TAG.Simulator.Model.ExternalEvent(TAG.Simulator.ObjectModel.Actors.IActor,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Method called when an external event has been received.
            </summary>
            <param name="Source">Actor receiving the event.</param>
            <param name="Name">Name of event.</param>
            <param name="Arguments">Event arguments.</param>
            <returns>If event was handled</returns>
        </member>
        <member name="M:TAG.Simulator.Model.IncActivityStartCount(System.String,System.String,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Called when an activity is started.
            </summary>
            <param name="ActivityId">Activity ID</param>
            <param name="SourceId">ID of node activating activity.</param>
            <param name="Tags">Meta-data tags related to the event.</param>
            <param name="LogEvent">If event should be logged.</param>
        </member>
        <member name="M:TAG.Simulator.Model.IncActivityFinishedCount(System.String,System.String,System.TimeSpan,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Called when an activity is finished.
            </summary>
            <param name="ActivityId">Activity ID</param>
            <param name="SourceId">ID of node activating activity.</param>
            <param name="ElapsedTime">Elapsed time.</param>
            <param name="LogEvent">If event should be logged.</param>
            <param name="Tags">Meta-data tags related to the event.</param>
        </member>
        <member name="M:TAG.Simulator.Model.IncActivityErrorCount(System.String,System.String,System.Exception,System.TimeSpan,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Called when an activity is stopped, due to error.
            </summary>
            <param name="ActivityId">Activity ID</param>
            <param name="SourceId">ID of node activating activity.</param>
            <param name="ElapsedTime">Elapsed time.</param>
            <param name="Error">Error exception.</param>
            <param name="Tags">Meta-data tags related to the event.</param>
        </member>
        <member name="M:TAG.Simulator.Model.CountEvent(System.String)">
            <summary>
            Counts an event.
            </summary>
            <param name="CounterName">Counter name</param>
        </member>
        <member name="M:TAG.Simulator.Model.IncrementCounter(System.String)">
            <summary>
            Increments a counter.
            </summary>
            <param name="CounterName">Counter name</param>
        </member>
        <member name="M:TAG.Simulator.Model.DecrementCounter(System.String)">
            <summary>
            Decrements a counter.
            </summary>
            <param name="CounterName">Counter name</param>
        </member>
        <member name="M:TAG.Simulator.Model.Sample(System.String,System.Double)">
            <summary>
            Records a sample
            </summary>
            <param name="CounterName">Counter name</param>
            <param name="Value">Value</param>
        </member>
        <member name="M:TAG.Simulator.Model.Sample(System.String,Waher.Script.Objects.PhysicalQuantity)">
            <summary>
            Records a sample
            </summary>
            <param name="CounterName">Counter name</param>
            <param name="Value">Value</param>
        </member>
        <member name="M:TAG.Simulator.Model.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:TAG.Simulator.Model.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:TAG.Simulator.Model.CreatePalette(System.Int32)">
            <summary>
            Creates a palette for graphs.
            </summary>
            <param name="N">Number of colors in palette.</param>
            <returns>Palette</returns>
        </member>
        <member name="M:TAG.Simulator.Model.GetEventVariables(TAG.Simulator.ObjectModel.Actors.IActor)">
            <summary>
            Gets a collection of variables for a new event.
            </summary>
            <param name="Actor">Optional Actor</param>
            <returns>Variables collection</returns>
        </member>
        <member name="M:TAG.Simulator.Model.ToString(SkiaSharp.SKColor)">
            <summary>
            Gets the string representation of a color.
            </summary>
            <param name="Color">Color</param>
            <returns>String representation</returns>
        </member>
        <member name="M:TAG.Simulator.Model.GetThreadCount">
            <summary>
            Gets the number of threads running in the current process.
            </summary>
            <returns>Thread count.</returns>
        </member>
        <member name="E:TAG.Simulator.Model.OnGetThreadCount">
            <summary>
            Event raised when the model needs to now the number of threads used by the simulator.
            </summary>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Action">
            <summary>
            Represents an action on an actor.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Action.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents an action on an actor.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Action.ActorId">
            <summary>
            Actor ID
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Action.ActionName">
            <summary>
            Action
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Action.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Action.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Action.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Action.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Action.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Action.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Activities">
            <summary>
            Container for activities.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activities.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Container for activities.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Activities.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activities.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activities.ActivityOrder">
            <summary>
            Gets the declared order of activities in the model.
            </summary>
            <returns>Order</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activities.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Activity">
            <summary>
            Represents an activity that can be executed as the result of triggered events.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents an activity that can be executed as the result of triggered events.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Activity.Id">
            <summary>
            ID of activity.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Activity.ExecutionCount">
            <summary>
            Execution count
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Activity.LogStart">
            <summary>
            If event should be logged at each start of the activity.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Activity.LogEnd">
            <summary>
            If event should be logged at the end of each activity.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Activity.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.Register(TAG.Simulator.ObjectModel.Activities.IActivityNode)">
            <summary>
            Registers a child activity node.
            </summary>
            <param name="Node">Activity node.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.Register(TAG.Simulator.ObjectModel.Events.IEvent)">
            <summary>
            Registers an event that calls the activity.
            </summary>
            <param name="Event">Event.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.ExecuteTask(Waher.Script.Variables)">
            <summary>
            Executes the activity.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.ExecuteActivity(Waher.Script.Variables,System.Collections.Generic.LinkedListNode{TAG.Simulator.ObjectModel.Activities.IActivityNode})">
            <summary>
            Executes an activity by executing a possibly branching sequence of nodes.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <param name="Start">Node to start execution with.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Activity.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.ActivityNode">
            <summary>
            Abstract base class for activity nodes
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.ActivityNode.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for activity nodes
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.ActivityNode.Id">
            <summary>
            ID of activity node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.ActivityNode.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.ActivityNode.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.ActivityNode.Register(TAG.Simulator.ObjectModel.Activities.IActivityNode)">
            <summary>
            Registers a child activity node.
            </summary>
            <param name="Node">Activity node.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.ActivityNode.FirstNode">
            <summary>
            First child activity node.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.ActivityNode.Count">
            <summary>
            Number of registered activity nodes.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.ActivityNode.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.ActivityNode.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Argument">
            <summary>
            Defines an argument in an action.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Argument.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Defines an argument in an action.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Argument.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model,System.String,Waher.Script.Expression)">
            <summary>
            Defines an argument in an action.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <param name="Name">Name of argument.</param>
            <param name="Value">Argument value.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Argument.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model,System.String,System.DateTime)">
            <summary>
            Defines an argument in an action.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <param name="Name">Name of argument.</param>
            <param name="Value">Argument value.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Argument.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model,System.String,Waher.Content.Duration)">
            <summary>
            Defines an argument in an action.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <param name="Name">Name of argument.</param>
            <param name="Value">Argument value.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Argument.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model,System.String,System.Double)">
            <summary>
            Defines an argument in an action.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <param name="Name">Name of argument.</param>
            <param name="Value">Argument value.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Argument.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model,System.String,System.String)">
            <summary>
            Defines an argument in an action.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <param name="Name">Name of argument.</param>
            <param name="Value">Argument value.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Argument.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model,System.String,System.TimeSpan)">
            <summary>
            Defines an argument in an action.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <param name="Name">Name of argument.</param>
            <param name="Value">Argument value.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Argument.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Argument.Name">
            <summary>
            Name of variable within the scope of the event.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Argument.Value">
            <summary>
            Value node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Argument.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Argument.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Argument.Register(TAG.Simulator.ObjectModel.Values.IValue)">
            <summary>
            Registers a value for the argument.
            </summary>
            <param name="Value">Value node</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Condition">
            <summary>
            Represents a condition.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Condition.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents a condition.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Condition.ConditionString">
            <summary>
            Condition string
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Condition.Expression">
            <summary>
            Parsed expression
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Condition.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Condition.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Condition.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Condition.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Condition.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Condition.IsTrue(Waher.Script.Variables)">
            <summary>
            If the node condition is true.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>If embedded nodes are to be executed.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Condition.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Boolean,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="First">If the condition is the first condition.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Conditional">
            <summary>
            Conditional execution in an activity.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Conditional.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Conditional execution in an activity.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Conditional.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Conditional.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Conditional.Register(TAG.Simulator.ObjectModel.Activities.IConditionNode)">
            <summary>
            Register a conditional node.
            </summary>
            <param name="Node">Conditional node</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Conditional.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Conditional.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Count">
            <summary>
            Counts an instance of an event.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Count.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Counts an instance of an event.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Count.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Count.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Count.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Count.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.CounterActivityNode">
            <summary>
            Abstract base class for counter activity nodes.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.CounterActivityNode.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for counter activity nodes.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.CounterActivityNode.Counter">
            <summary>
            Counter name
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.CounterActivityNode.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Dec">
            <summary>
            Decrements a counter.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Dec.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Decrements a counter.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Dec.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Dec.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Dec.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Dec.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Delay">
            <summary>
            Represents a delay in an activity.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Delay.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents a delay in an activity.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Delay.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Delay.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Delay.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Delay.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Delay.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Delay.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Eval">
            <summary>
            Executes script in an activity.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Eval.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents a delay in an activity.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Eval.Script">
            <summary>
            Script string
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Eval.Expression">
            <summary>
            Parsed expression
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Eval.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Eval.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Eval.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Eval.ParseChildren">
            <summary>
            If children are 
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Eval.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Eval.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Eval.ExportPlantUml(System.String,System.IO.StreamWriter,System.Int32,System.Char,System.Boolean)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Script">Script expression.</param>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
            <param name="Delimiters">If delimiters : and ; should be included at the beginning and end.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Finished">
            <summary>
            Terminates execution of activity.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Finished.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Terminates execution of activity.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Finished.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Finished.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Finished.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Finished.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.FinishedException">
            <summary>
            Exceptions thrown when the execution of an activity is completed.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.FinishedException.#ctor">
            <summary>
            Exceptions thrown when the execution of an activity is completed.
            </summary>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.GoTo">
            <summary>
            Jumps to another node in the activity.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.GoTo.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Jumps to another node in the activity.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.GoTo.Node">
            <summary>
            Referenced node
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.GoTo.Reference">
            <summary>
            Reference
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.GoTo.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.GoTo.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.GoTo.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.GoTo.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.GoTo.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.GoTo.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Group">
            <summary>
            Groups activity nodes together.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Group.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Groups activity nodes together.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Group.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Group.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Group.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Group.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Group.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.IActivity">
            <summary>
            Interface for activities
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.IActivity.Id">
            <summary>
            ID of activity.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.IActivity.LogStart">
            <summary>
            If event should be logged at each start of the activity.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.IActivity.LogEnd">
            <summary>
            If event should be logged at the end of each activity.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.IActivity.ExecutionCount">
            <summary>
            Execution count
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.IActivity.Register(TAG.Simulator.ObjectModel.Activities.IActivityNode)">
            <summary>
            Registers a child activity node.
            </summary>
            <param name="Node">Activity node.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.IActivity.Register(TAG.Simulator.ObjectModel.Events.IEvent)">
            <summary>
            Registers an event that calls the activity.
            </summary>
            <param name="Event">Event.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.IActivity.ExecuteTask(Waher.Script.Variables)">
            <summary>
            Executes the activity.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.IActivityNode">
            <summary>
            Interface for activity nodes
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.IActivityNode.Id">
            <summary>
            ID of activity node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.IActivityNode.Register(TAG.Simulator.ObjectModel.Activities.IActivityNode)">
            <summary>
            Registers a child activity node.
            </summary>
            <param name="Node">Activity node.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.IActivityNode.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.IActivityNode.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.IConditionNode">
            <summary>
            Interface for condition nodes
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.IConditionNode.IsTrue(Waher.Script.Variables)">
            <summary>
            If the node condition is true.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>If embedded nodes are to be executed.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.IConditionNode.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Boolean,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="First">If the condition is the first condition.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Inc">
            <summary>
            Increments a counter.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Inc.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Increments a counter.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Inc.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Inc.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Inc.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Inc.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.ITriggerNode">
            <summary>
            Interface for trigger nodes
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.ITriggerNode.GetTask">
            <summary>
            Gets a task object.
            </summary>
            <returns>Task object signalling when trigger is activated.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.ITriggerNode.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Boolean,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="First">If the condition is the first condition.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Otherwise">
            <summary>
            Represents a condition that is always true.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Otherwise.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents a condition that is always true.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Otherwise.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Otherwise.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Otherwise.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Otherwise.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Otherwise.IsTrue(Waher.Script.Variables)">
            <summary>
            If the node condition is true.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>If embedded nodes are to be executed.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Otherwise.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Boolean,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="First">If the condition is the first condition.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Parallel">
            <summary>
            Executes multiple threads in parallel.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Parallel.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Executes multiple threads in parallel.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Parallel.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Parallel.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Parallel.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Parallel.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Sample">
            <summary>
            Sets a variable value when an event is triggered.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Sample.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Sets a variable value when an event is triggered.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Sample.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Sample.Name">
            <summary>
            Name of variable within the scope of the event.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Sample.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Sample.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Sample.Register(TAG.Simulator.ObjectModel.Values.IValue)">
            <summary>
            Registers a value for the argument.
            </summary>
            <param name="Value">Value node</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Sample.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Sample.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Start">
            <summary>
            Represents the starting point of the activity.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Start.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents the starting point of the activity.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Start.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Start.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Start.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Start.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Stop">
            <summary>
            Represents the stoping point of the activity.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Stop.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents the stoping point of the activity.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Stop.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Stop.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Stop.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Stop.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Thread">
            <summary>
            Represents a thread in parallel execution.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Thread.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents a thread in parallel execution.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Thread.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Thread.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Thread.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Timeout">
            <summary>
            Adds a timeout limit in a Wait statement.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Timeout.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Adds a timeout limit in a Wait statement.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Timeout.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Timeout.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Timeout.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Timeout.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Timeout.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Timeout.GetTask">
            <summary>
            Gets a task object.
            </summary>
            <returns>Task object signalling when trigger is activated.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Timeout.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Boolean,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="First">If the condition is the first condition.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Triggered">
            <summary>
            Waits for an event to be triggered
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Triggered.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Waits for an event to be triggered
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Triggered.Event">
            <summary>
            Condition string
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Triggered.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Triggered.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Triggered.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Triggered.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Triggered.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Triggered.GetTask">
            <summary>
            Gets a task object.
            </summary>
            <returns>Task object signalling when trigger is activated.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Triggered.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Boolean,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="First">If the condition is the first condition.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Try">
            <summary>
            Represents a statement that may or may not fail.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Try.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents a statement that may or may not fail.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Try.ConditionString">
            <summary>
            Condition string
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Try.Expression">
            <summary>
            Parsed expression
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Try.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Try.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Try.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Try.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Try.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Try.IsTrue(Waher.Script.Variables)">
            <summary>
            If the node condition is true.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>If embedded nodes are to be executed.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Try.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Boolean,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="First">If the condition is the first condition.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Activities.Wait">
            <summary>
            Conditional execution in an activity, based on external events.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Wait.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Conditional execution in an activity, based on external events.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Activities.Wait.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Wait.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Wait.Register(TAG.Simulator.ObjectModel.Activities.ITriggerNode)">
            <summary>
            Register a trigger node.
            </summary>
            <param name="Node">Trigger node</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Wait.Execute(Waher.Script.Variables)">
            <summary>
            Executes a node.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Next node of execution, if different from the default, otherwise null (for default).</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Activities.Wait.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Actors.Actor">
            <summary>
            Abstract base class for actors
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for actors
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model,System.Int32,System.String)">
            <summary>
            Abstract base class for actors
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <param name="InstanceIndex">Instance index.</param>
            <param name="InstanceId">ID of instance</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.Actor.Id">
            <summary>
            ID of actor.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.Actor.InstanceId">
            <summary>
            ID of actor instance.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.Actor.N">
            <summary>
            Number of actors of this type specified.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.Actor.InstanceIndex">
            <summary>
            Actor instance index.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.Actor.Variables">
            <summary>
            Collection of actor-variables.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.Finalize">
            <summary>
            Finalizes the node after simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.CreateInstance(System.Int32,System.String)">
            <summary>
            Creates an instance of the actor.
            
            Note: Parent of newly created actor should point to this node (the creator of the instance object).
            </summary>
            <param name="InstanceIndex">Instance index.</param>
            <param name="InstanceId">ID of instance</param>
            <returns>Actor instance.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.InitializeInstance">
            <summary>
            Initializes an instance of an actor.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.StartInstance">
            <summary>
            Starts an instance of an actor.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.FinalizeInstance">
            <summary>
            Finalizes an instance of an actor.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.Register(TAG.Simulator.ObjectModel.Events.IExternalEvent)">
            <summary>
            Registers an external event on the actor.
            </summary>
            <param name="ExternalEvent">External event</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.TryGetExternalEvent(System.String,TAG.Simulator.ObjectModel.Events.IExternalEvent@)">
            <summary>
            Tries to get an external event, given its name.
            </summary>
            <param name="Name">Name of external event.</param>
            <param name="ExternalEvent">External event object.</param>
            <returns>If an external event with the corresponding name was found.</returns>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.Actor.FreeCount">
            <summary>
            Number of individuals in population that are free.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.GetFreeIndividual(System.Int32,System.Boolean)">
            <summary>
            Gets a free individual instance from the population.
            </summary>
            <param name="Index">Zero-based index of individual to get.</param>
            <param name="Exclusive">If individual is for exclusive use (i.e. will not be free once gotten, until returned).</param>
            <returns>Individual instance returned.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.ReturnIndividual(TAG.Simulator.ObjectModel.Actors.IActor)">
            <summary>
            Returns an individual to the population, once free again.
            </summary>
            <param name="Individual">Individual to return.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.Actor.ActivityObject">
            <summary>
            Returns the object that will be used by the actor for actions during an activity.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actor.AnnotateActorUseCaseUml(System.IO.StreamWriter,System.String)">
            <summary>
            Allows the actor to add notes related to the actor in use case diagrams.
            </summary>
            <param name="Output">Use Case diagram output.</param>
            <param name="Id">ID of actor in use case diagram.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Actors.Actors">
            <summary>
            Container for actors.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actors.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Container for actors.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.Actors.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actors.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.Actors.Register(TAG.Simulator.ObjectModel.Actors.IActor)">
            <summary>
            Registers an actor with the collection of actors.
            </summary>
            <param name="Actor">Actor</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Actors.IActor">
            <summary>
            Basic interface for simulator nodes. Implementing this interface allows classes with default contructors to be used
            in simulator models.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.IActor.Id">
            <summary>
            ID of actor.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.IActor.InstanceId">
            <summary>
            ID of actor instance.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.IActor.Variables">
            <summary>
            Collection of actor-variables.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.IActor.Register(TAG.Simulator.ObjectModel.Events.IExternalEvent)">
            <summary>
            Registers an external event on the actor.
            </summary>
            <param name="ExternalEvent">External event</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.IActor.TryGetExternalEvent(System.String,TAG.Simulator.ObjectModel.Events.IExternalEvent@)">
            <summary>
            Tries to get an external event, given its name.
            </summary>
            <param name="Name">Name of external event.</param>
            <param name="ExternalEvent">External event object.</param>
            <returns>If an external event with the corresponding name was found.</returns>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.IActor.FreeCount">
            <summary>
            Number of individuals in population that are free.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.IActor.GetFreeIndividual(System.Int32,System.Boolean)">
            <summary>
            Gets a free individual instance from the population.
            </summary>
            <param name="Index">Zero-based index of individual to get.</param>
            <param name="Exclusive">If individual is for exclusive use (i.e. will not be free once gotten, until returned).</param>
            <returns>Individual instance returned.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.IActor.ReturnIndividual(TAG.Simulator.ObjectModel.Actors.IActor)">
            <summary>
            Returns an individual to the population, once free again.
            </summary>
            <param name="Individual">Individual to return.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.IActor.ActivityObject">
            <summary>
            Returns the object that will be used by the actor for actions during an activity.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.IActor.AnnotateActorUseCaseUml(System.IO.StreamWriter,System.String)">
            <summary>
            Allows the actor to add notes related to the actor in use case diagrams.
            </summary>
            <param name="Output">Use Case diagram output.</param>
            <param name="Id">ID of actor in use case diagram.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Actors.IActors">
            <summary>
            Interface for collections of actors.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.IActors.Register(TAG.Simulator.ObjectModel.Actors.IActor)">
            <summary>
            Registers an actor with the collection of actors.
            </summary>
            <param name="Actor">Actor</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Actors.TimerActor">
            <summary>
            Represents an internal clock.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.TimerActor.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Represents an internal clock.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.TimerActor.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model,System.Int32,System.String)">
            <summary>
            Represents an internal clock.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <param name="InstanceIndex">Instance index.</param>
            <param name="InstanceId">ID of instance</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Actors.TimerActor.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.TimerActor.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.TimerActor.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.TimerActor.CreateInstance(System.Int32,System.String)">
            <summary>
            Creates an instance of the actor.
            
            Note: Parent of newly created actor should point to this node (the creator of the instance object).
            </summary>
            <param name="InstanceIndex">Instance index.</param>
            <param name="InstanceId">ID of instance</param>
            <returns>Actor instance.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.TimerActor.InitializeInstance">
            <summary>
            Initializes an instance of an actor.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.TimerActor.StartInstance">
            <summary>
            Starts an instance of an actor.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.TimerActor.FinalizeInstance">
            <summary>
            Finalizes an instance of an actor.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Actors.TimerActor.AnnotateActorUseCaseUml(System.IO.StreamWriter,System.String)">
            <summary>
            Allows the actor to add notes related to the actor in use case diagrams.
            </summary>
            <param name="Output">Use Case diagram output.</param>
            <param name="Id">ID of actor in use case diagram.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Distributions.Chi">
            <summary>
            Chi distribution
            </summary>
        </member>
        <member name="F:TAG.Simulator.ObjectModel.Distributions.Chi.t0">
            <summary>
            Time of start of distribution
            </summary>
        </member>
        <member name="F:TAG.Simulator.ObjectModel.Distributions.Chi.k">
            <summary>
            k parameter
            </summary>
        </member>
        <member name="F:TAG.Simulator.ObjectModel.Distributions.Chi.kHalf">
            <summary>
            k/2
            </summary>
        </member>
        <member name="F:TAG.Simulator.ObjectModel.Distributions.Chi.c">
            <summary>
            1/gamma(k/2)
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Chi.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Chi distribution
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Chi.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Chi.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Chi.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Chi.GetCumulativeProbability(System.Double,System.Int32)">
            <summary>
            The Cumulative Distribution Function (CDF) of the distribution, excluding intensity (<see cref="P:TAG.Simulator.ObjectModel.Distributions.Distribution.N"/>).
            </summary>
            <param name="t">Time</param>
            <param name="NrCycles">Number of time cycles completed.</param>
            <returns>CDU(t)</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Chi.ExportPdfBody(System.Text.StringBuilder)">
            <summary>
            Exports the PDF function body.
            </summary>
            <param name="Output">Export output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Distributions.ChiSquare">
            <summary>
            Chi-square distribution
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.ChiSquare.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Chi-square distribution
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.ChiSquare.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.ChiSquare.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.ChiSquare.GetCumulativeProbability(System.Double,System.Int32)">
            <summary>
            The Cumulative Distribution Function (CDF) of the distribution, excluding intensity (<see cref="P:TAG.Simulator.ObjectModel.Distributions.Distribution.N"/>).
            </summary>
            <param name="t">Time</param>
            <param name="NrCycles">Number of time cycles completed.</param>
            <returns>CDU(t)</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.ChiSquare.ExportPdfBody(System.Text.StringBuilder)">
            <summary>
            Exports the PDF function body.
            </summary>
            <param name="Output">Export output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Distributions.Distribution">
            <summary>
            Abstract base class for distributions
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distribution.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for distributions
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Distribution.Id">
            <summary>
            ID of distribution.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Distribution.N">
            <summary>
            Intensity/Frequency/Factor
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Distribution.TimeCycleUnits">
            <summary>
            Time cycle, in number of <see cref="P:TAG.Simulator.Model.TimeUnit"/>.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distribution.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distribution.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distribution.CheckTrigger(System.Double,System.Double,System.Int32)">
            <summary>
            Check if distribution has a sample within the time period.
            </summary>
            <param name="t1">Starting time of period.</param>
            <param name="t2">Ending time of period.</param>
            <param name="NrCycles">Number of time cycles completed.</param>
            <returns>How many times samples were found in time period.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distribution.GetCumulativeProbability(System.Double,System.Int32)">
            <summary>
            The Cumulative Distribution Function (CDF) of the distribution, excluding intensity (<see cref="P:TAG.Simulator.ObjectModel.Distributions.Distribution.N"/>).
            </summary>
            <param name="t">Time</param>
            <param name="NrCycles">Number of time cycles completed.</param>
            <returns>CDU(t)</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distribution.ExportPdfOnceOnly(System.Text.StringBuilder)">
            <summary>
            Exports the PDF function, if not already exported.
            </summary>
            <param name="Output">Export output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distribution.ExportPdf(System.Text.StringBuilder)">
            <summary>
            Exports the PDF function.
            </summary>
            <param name="Output">Export output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distribution.ExportPdfBody(System.Text.StringBuilder)">
            <summary>
            Exports the PDF function body.
            </summary>
            <param name="Output">Export output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Distributions.Distributions">
            <summary>
            Container for distributions.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distributions.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Container for distributions.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Distributions.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Distributions.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Distributions.Exponential">
            <summary>
            Exponential distribution
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Exponential.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Exponential distribution
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Exponential.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Exponential.RateLambda">
            <summary>
            λ
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Exponential.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Exponential.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Exponential.GetCumulativeProbability(System.Double,System.Int32)">
            <summary>
            The Cumulative Distribution Function (CDF) of the distribution, excluding intensity (<see cref="P:TAG.Simulator.ObjectModel.Distributions.Distribution.N"/>).
            </summary>
            <param name="t">Time</param>
            <param name="NrCycles">Number of time cycles completed.</param>
            <returns>CDU(t)</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Exponential.ExportPdfBody(System.Text.StringBuilder)">
            <summary>
            Exports the PDF function body.
            </summary>
            <param name="Output">Export output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Distributions.Gamma">
            <summary>
            Gamma distribution
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Gamma.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Gamma distribution
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Gamma.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Gamma.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Gamma.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Gamma.GetCumulativeProbability(System.Double,System.Int32)">
            <summary>
            The Cumulative Distribution Function (CDF) of the distribution, excluding intensity (<see cref="P:TAG.Simulator.ObjectModel.Distributions.Distribution.N"/>).
            </summary>
            <param name="t">Time</param>
            <param name="NrCycles">Number of time cycles completed.</param>
            <returns>CDU(t)</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Gamma.ExportPdfBody(System.Text.StringBuilder)">
            <summary>
            Exports the PDF function body.
            </summary>
            <param name="Output">Export output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Distributions.IDistribution">
            <summary>
            Interface for distributions
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.IDistribution.Id">
            <summary>
            ID of distribution.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.IDistribution.CheckTrigger(System.Double,System.Double,System.Int32)">
            <summary>
            Check if distribution has a sample within the time period.
            </summary>
            <param name="t1">Starting time of period.</param>
            <param name="t2">Ending time of period.</param>
            <param name="NrCycles">Number of time cycles completed.</param>
            <returns>How many times samples were found in time period.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.IDistribution.ExportPdfOnceOnly(System.Text.StringBuilder)">
            <summary>
            Exports the PDF function, if not already exported.
            </summary>
            <param name="Output">Export output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Distributions.Normal">
            <summary>
            Normal distribution
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Normal.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Normal distribution
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Normal.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Normal.Mean">
            <summary>
            μ
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Normal.StdDev">
            <summary>
            σ
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Normal.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Normal.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Normal.GetCumulativeProbability(System.Double,System.Int32)">
            <summary>
            The Cumulative Distribution Function (CDF) of the distribution, excluding intensity (<see cref="P:TAG.Simulator.ObjectModel.Distributions.Distribution.N"/>).
            </summary>
            <param name="t">Time</param>
            <param name="NrCycles">Number of time cycles completed.</param>
            <returns>CDU(t)</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Normal.ExportPdfBody(System.Text.StringBuilder)">
            <summary>
            Exports the PDF function body.
            </summary>
            <param name="Output">Export output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Distributions.Uniform">
            <summary>
            Uniform distribution
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Uniform.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Uniform distribution
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Uniform.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Uniform.From">
            <summary>
            From
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Uniform.To">
            <summary>
            To
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Distributions.Uniform.Inverted">
            <summary>
            If the interval is inverted (with respect to the model time cycle).
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Uniform.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Uniform.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Uniform.GetCumulativeProbability(System.Double,System.Int32)">
            <summary>
            The Cumulative Distribution Function (CDF) of the distribution, excluding intensity (<see cref="P:TAG.Simulator.ObjectModel.Distributions.Distribution.N"/>).
            </summary>
            <param name="t">Time</param>
            <param name="NrCycles">Number of time cycles completed.</param>
            <returns>CDU(t)</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Distributions.Uniform.ExportPdfBody(System.Text.StringBuilder)">
            <summary>
            Exports the PDF function body.
            </summary>
            <param name="Output">Export output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.ActorReference">
            <summary>
            References a population of actors.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ActorReference.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            References a population of actors.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ActorReference.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ActorReference.Name">
            <summary>
            Name of actor within the scope of the event.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ActorReference.Exclusive">
            <summary>
            If the actor is referenced for exclusive use in the event (i.e. cannot participate in another event at the same time).
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ActorReference.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ActorReference.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ActorReference.Register(TAG.Simulator.ObjectModel.Actors.IActor)">
            <summary>
            Registers an actor with the collection of actors.
            </summary>
            <param name="Actor">Actor</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ActorReference.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ActorReference.Prepare(Waher.Script.Variables,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Prepares <paramref name="Variables"/> for the execution of an event.
            </summary>
            <param name="Variables">Event variables</param>
            <param name="Tags">Extensible list of meta-data tags related to the event.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ActorReference.Release(Waher.Script.Variables)">
            <summary>
            Releases resources at the end of an event.
            </summary>
            <param name="Variables">Event variables</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ActorReference.ExportPlantUml(System.IO.StreamWriter,System.String,System.Int32)">
            <summary>
            Exports the node to PlantUML script in a markdown document.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Name">Optional name for the association.</param>
            <param name="Index">Chart Index</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.Event">
            <summary>
            Abstract base class for events
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Event.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for events
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Event.Id">
            <summary>
            ID of event.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Event.ActivityId">
            <summary>
            ID of Activity to execute when event is triggered.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Event.Activity">
            <summary>
            Activity to execute when event is triggered.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Event.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Event.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Event.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Event.Register(TAG.Simulator.ObjectModel.Events.IEventPreparation)">
            <summary>
            Registers an event preparation node.
            </summary>
            <param name="PreparationNode">Preparation node.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Event.Register(TAG.Simulator.ObjectModel.Events.IExternalEvent)">
            <summary>
            Registers an external event.
            </summary>
            <param name="ExternalEvent">External event.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Event.Trigger(Waher.Script.Variables,Waher.Script.Expression,System.Int32)">
            <summary>
            Triggers the event.
            </summary>
            <param name="Variables">Event variables</param>
            <param name="Guard">Optional guard expression.</param>
            <param name="GuardLimit">Maximum number of times to apply guard expression in search of suitable candidates.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Event.UseCaseLinkName">
            <summary>
            Name of use case association.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Event.Distribution">
            <summary>
            Associated distribution, null if none.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Event.Description">
            <summary>
            Event description
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Event.ExportUseCaseData(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports use case diagram data.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Index">Chart Index</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Event.GetTrigger">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> object, that will be completed when the event is triggered.
            </summary>
            <returns>Trigger task object.</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.EventHandler">
            <summary>
            External Event
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventHandler.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            External Event
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.EventHandler.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventHandler.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.EventPreparation">
            <summary>
            Abstract base class for event preparation nodes (with children).
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventPreparation.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for event preparation nodes (with children).
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventPreparation.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventPreparation.Prepare(Waher.Script.Variables,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Prepares <paramref name="Variables"/> for the execution of an event.
            </summary>
            <param name="Variables">Event variables</param>
            <param name="Tags">Extensible list of meta-data tags related to the event.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventPreparation.Release(Waher.Script.Variables)">
            <summary>
            Releases resources at the end of an event.
            </summary>
            <param name="Variables">Event variables</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventPreparation.ExportPlantUml(System.IO.StreamWriter,System.String,System.Int32)">
            <summary>
            Exports the node to PlantUML script in a markdown document.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Name">Optional name for the association.</param>
            <param name="Index">Chart Index</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.Events">
            <summary>
            Container for events.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Events.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Container for events.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Events.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Events.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Events.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.EventVariables">
            <summary>
            Event variables
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventVariables.#ctor(Waher.Script.Variables,TAG.Simulator.Model,TAG.Simulator.ObjectModel.Actors.IActor)">
            <summary>
            Event variables
            </summary>
            <param name="ModelVariables">Model variables.</param>
            <param name="Model">Simulation model.</param>
            <param name="Actor">Optional Actor</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.EventVariables.ModelVariables">
            <summary>
            Model variables
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventVariables.ContainsVariable(System.String)">
            <summary>
            If the collection contains a variable with a given name.
            </summary>
            <param name="Name">Variable name.</param>
            <returns>If a variable with that name exists.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventVariables.TryGetVariable(System.String,Waher.Script.Variable@)">
            <summary>
            Tries to get a variable object, given its name.
            </summary>
            <param name="Name">Variable name.</param>
            <param name="Variable">Variable, if found, or null otherwise.</param>
            <returns>If a variable with the corresponding name was found.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.EventVariables.Remove(System.String)">
            <summary>
            Removes a varaiable from the collection.
            </summary>
            <param name="VariableName">Name of variable.</param>
            <returns>If the variable was found and removed.</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.ExternalEvent">
            <summary>
            Handles an incoming event raised from an external source
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ExternalEvent.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Handles an incoming event raised from an external source
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ExternalEvent.Name">
            <summary>
            Name of external event
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ExternalEvent.EventId">
            <summary>
            Optional name for variable, if different from <see cref="P:TAG.Simulator.ObjectModel.Events.ExternalEvent.Name"/>
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ExternalEvent.ActorName">
            <summary>
            Optional name for actor variable reference of sender of external event.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ExternalEvent.Actor">
            <summary>
            Actor reference.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ExternalEvent.Event">
            <summary>
            Referenced event object.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ExternalEvent.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.ExternalEvent.Parameters">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ExternalEvent.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ExternalEvent.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ExternalEvent.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ExternalEvent.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ExternalEvent.Register(TAG.Simulator.ObjectModel.Events.Parameter)">
            <summary>
            Registers a parameter with the external event.
            </summary>
            <param name="Parameter">Parameter</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ExternalEvent.Trigger(TAG.Simulator.ObjectModel.Actors.IActor,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Method called when an external event has been received.
            </summary>
            <param name="Source">Actor receiving the event.</param>
            <param name="Arguments">Event arguments.</param>
            <returns>If event was handled</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.FromPopulation">
            <summary>
            References a specific population of actors.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.FromPopulation.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            References a specific population of actors.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.FromPopulation.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.FromPopulation.ActorId">
            <summary>
            Name of actor defining the population.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.FromPopulation.Actor">
            <summary>
            Referenced actor.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.FromPopulation.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.FromPopulation.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.FromPopulation.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.IEvent">
            <summary>
            Interface for events
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.IEvent.Id">
            <summary>
            ID of event.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.IEvent.Distribution">
            <summary>
            Associated distribution, null if none.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.IEvent.Description">
            <summary>
            Event description
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.IEvent.Trigger(Waher.Script.Variables,Waher.Script.Expression,System.Int32)">
            <summary>
            Triggers the event.
            </summary>
            <param name="Variables">Event variables</param>
            <param name="Guard">Optional guard expression.</param>
            <param name="GuardLimit">Maximum number of times to apply guard expression in search of suitable candidates.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.IEvent.Register(TAG.Simulator.ObjectModel.Events.IEventPreparation)">
            <summary>
            Registers an event preparation node.
            </summary>
            <param name="PreparationNode">Preparation node.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.IEvent.Register(TAG.Simulator.ObjectModel.Events.IExternalEvent)">
            <summary>
            Registers an external event.
            </summary>
            <param name="ExternalEvent">External event.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.IEvent.ExportUseCaseData(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports use case information
            </summary>
            <param name="Output">Output</param>
            <param name="Index">Chart Index</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.IEvent.GetTrigger">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> object, that will be completed when the event is triggered.
            </summary>
            <returns>Trigger task object.</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.IEventPreparation">
            <summary>
            Interface for event preparation nodes
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.IEventPreparation.Prepare(Waher.Script.Variables,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Prepares <paramref name="Variables"/> for the execution of an event.
            </summary>
            <param name="Variables">Event variables</param>
            <param name="Tags">Extensible list of meta-data tags related to the event.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.IEventPreparation.Release(Waher.Script.Variables)">
            <summary>
            Releases resources at the end of an event.
            </summary>
            <param name="Variables">Event variables</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.IEventPreparation.ExportPlantUml(System.IO.StreamWriter,System.String,System.Int32)">
            <summary>
            Exports the node to PlantUML script in a markdown document.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Name">Optional name for the association.</param>
            <param name="Index">Chart Index</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.IExternalEvent">
            <summary>
            Interface for external events.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.IExternalEvent.Name">
            <summary>
            Name of external event
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.IExternalEvent.ActorName">
            <summary>
            Optional name for actor variable reference of sender of external event.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.IExternalEvent.Actor">
            <summary>
            Actor reference.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.IExternalEvent.Parameters">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.IExternalEvent.Trigger(TAG.Simulator.ObjectModel.Actors.IActor,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Method called when an external event has been received.
            </summary>
            <param name="Source">Actor receiving the event.</param>
            <param name="Arguments">Event arguments.</param>
            <returns>If event was handled</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.ITimeTriggerEvent">
            <summary>
            Interface for events that can be triggered by elapsed time.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.ITimeTriggerEvent.CheckTrigger(System.Double,System.Double,System.Int32)">
            <summary>
            Check if event is triggered during a time period.
            </summary>
            <param name="t1">Starting time of period.</param>
            <param name="t2">Ending time of period.</param>
            <param name="NrCycles">Number of time cycles completed.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.Parameter">
            <summary>
            Sets a variable to the value of an event parameter.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Parameter.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Sets a variable to the value of an event parameter.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Parameter.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model,System.String,System.String)">
            <summary>
            Sets a variable to the value of an event parameter.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <param name="Name">Parameter name</param>
            <param name="Variable">Variable name</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Parameter.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Parameter.Name">
            <summary>
            Name of external event
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.Parameter.Variable">
            <summary>
            Optional name for variable, if different from <see cref="P:TAG.Simulator.ObjectModel.Events.Parameter.Name"/>
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Parameter.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Parameter.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.Parameter.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.SetVariable">
            <summary>
            Sets a variable value when an event is triggered.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.SetVariable.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Sets a variable value when an event is triggered.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.SetVariable.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.SetVariable.Name">
            <summary>
            Name of variable within the scope of the event.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.SetVariable.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.SetVariable.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.SetVariable.Register(TAG.Simulator.ObjectModel.Values.IValue)">
            <summary>
            Registers a value for the argument.
            </summary>
            <param name="Value">Value node</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.SetVariable.Prepare(Waher.Script.Variables,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Prepares <paramref name="Variables"/> for the execution of an event.
            </summary>
            <param name="Variables">Event variables</param>
            <param name="Tags">Extensible list of meta-data tags related to the event.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.SetVariable.Release(Waher.Script.Variables)">
            <summary>
            Releases resources at the end of an event.
            </summary>
            <param name="Variables">Event variables</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.SetVariable.ExportPlantUml(System.IO.StreamWriter,System.String,System.Int32)">
            <summary>
            Exports the node to PlantUML script in a markdown document.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Name">Optional name for the association.</param>
            <param name="Index">Chart Index</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Events.StochasticEvent">
            <summary>
            Stochastic Event
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.StochasticEvent.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Stochastic Event
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.StochasticEvent.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.StochasticEvent.DistributionId">
            <summary>
            ID of Distribution
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.StochasticEvent.Distribution">
            <summary>
            Distribution
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.StochasticEvent.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.StochasticEvent.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.StochasticEvent.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.StochasticEvent.CheckTrigger(System.Double,System.Double,System.Int32)">
            <summary>
            Check if event is triggered during a time period.
            </summary>
            <param name="t1">Starting time of period.</param>
            <param name="t2">Ending time of period.</param>
            <param name="NrCycles">Number of time cycles completed.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Events.StochasticEvent.UseCaseLinkName">
            <summary>
            Name of use case association.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Events.StochasticEvent.ExportUseCaseData(System.IO.StreamWriter,System.Int32)">
            <summary>
            Exports use case diagram data.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Index">Chart Index</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.CombinedCounterGraph">
            <summary>
            Combines counter graphs
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedCounterGraph.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Combines counter graphs
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.CombinedCounterGraph.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedCounterGraph.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedCounterGraph.GetGraph(System.String)">
            <summary>
            Gets a graph from its reference.
            </summary>
            <param name="Reference">Source reference.</param>
            <returns>Graph object if found, null otherwise.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedCounterGraph.Register(TAG.Simulator.ObjectModel.Graphs.ISource)">
            <summary>
            Registers a source.
            </summary>
            <param name="Source">Source node</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.CombinedExecutionsGraph">
            <summary>
            Combines execution count graphs
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedExecutionsGraph.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Combines execution count graphs
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.CombinedExecutionsGraph.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedExecutionsGraph.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedExecutionsGraph.GetGraph(System.String)">
            <summary>
            Gets a graph from its reference.
            </summary>
            <param name="Reference">Source reference.</param>
            <returns>Graph object if found, null otherwise.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedExecutionsGraph.Register(TAG.Simulator.ObjectModel.Graphs.ISource)">
            <summary>
            Registers a source.
            </summary>
            <param name="Source">Source node</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.CombinedExecutionTimeGraph">
            <summary>
            Combines execution time graphs
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedExecutionTimeGraph.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Combines execution time graphs
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.CombinedExecutionTimeGraph.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedExecutionTimeGraph.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedExecutionTimeGraph.GetGraph(System.String)">
            <summary>
            Gets a graph from its reference.
            </summary>
            <param name="Reference">Source reference.</param>
            <returns>Graph object if found, null otherwise.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedExecutionTimeGraph.Register(TAG.Simulator.ObjectModel.Graphs.ISource)">
            <summary>
            Registers a source.
            </summary>
            <param name="Source">Source node</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.CombinedGraph">
            <summary>
            Abstract base class for combined graphs
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedGraph.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for combined graphs
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.CombinedGraph.Title">
            <summary>
            Title of graph.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedGraph.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedGraph.Register(TAG.Simulator.ObjectModel.Graphs.ISource)">
            <summary>
            Registers a source.
            </summary>
            <param name="Source">Source node</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedGraph.ExportGraph(System.IO.StreamWriter)">
            <summary>
            Exports the graph to a markdown output.
            </summary>
            <param name="Output">Markdown output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedGraph.ExportLegend(System.IO.StreamWriter,System.String[],SkiaSharp.SKColor[])">
            <summary>
            Exports a legend.
            </summary>
            <param name="Output">Markdown output</param>
            <param name="Labels">Labels to add to legend.</param>
            <param name="Palette">Palette to use</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedGraph.ExportGraphScript(System.IO.StreamWriter,System.String,System.Boolean)">
            <summary>
            Exports the graph to a markdown output.
            </summary>
            <param name="Output">Markdown output</param>
            <param name="CustomColor">Optional custom color</param>
            <param name="Span">If the entire span can be included.</param>
            <returns>If script was exported.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedGraph.GetGraph(System.String)">
            <summary>
            Gets a graph from its reference.
            </summary>
            <param name="Reference">Source reference.</param>
            <returns>Graph object if found, null otherwise.</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.CombinedSampleGraph">
            <summary>
            Combines sample graphs
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedSampleGraph.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Combines sample graphs
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.CombinedSampleGraph.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedSampleGraph.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedSampleGraph.GetGraph(System.String)">
            <summary>
            Gets a graph from its reference.
            </summary>
            <param name="Reference">Source reference.</param>
            <returns>Graph object if found, null otherwise.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CombinedSampleGraph.Register(TAG.Simulator.ObjectModel.Graphs.ISource)">
            <summary>
            Registers a source.
            </summary>
            <param name="Source">Source node</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.CustomGraph">
            <summary>
            Defines a custom graph (for a counter, variable, sample, etc.)
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CustomGraph.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Defines a custom graph (for a counter, variable, sample, etc.)
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.CustomGraph.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.CustomGraph.For">
            <summary>
            If the graph represents the visualization of a given entity. (Otherwise, null, or the empty string.)
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.CustomGraph.Id">
            <summary>
            Bucket ID
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.CustomGraph.TotalCount">
            <summary>
            Total Counter
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.CustomGraph.BucketTime">
            <summary>
            Time to accumulate values.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CustomGraph.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.CustomGraph.ParseChildren">
            <summary>
            If children are to be parsed by <see cref="M:TAG.Simulator.ObjectModel.Graphs.CustomGraph.FromXml(System.Xml.XmlElement)"/>
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CustomGraph.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CustomGraph.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CustomGraph.Inc">
            <summary>
            Increments counter.
            </summary>
            <returns>Start time of bucket that was incremented.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CustomGraph.Dec">
            <summary>
            Decrements counter.
            </summary>
            <returns>Start time of bucket that was incremented.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CustomGraph.Sample(System.DateTime,Waher.Script.Objects.PhysicalQuantity)">
            <summary>
            Adds a sample
            </summary>
            <param name="Timestamp">Timestamp of value.</param>
            <param name="Value">Sample value reported</param>
            <returns>Start time of bucket to which the value was reported.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CustomGraph.Sample(System.DateTime,System.Double)">
            <summary>
            Adds a sample
            </summary>
            <param name="Timestamp">Timestamp of value.</param>
            <param name="Value">Sample value reported</param>
            <returns>Start time of bucket to which the value was reported.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CustomGraph.CountOccurrence(System.DateTime)">
            <summary>
            Counts one occurrence
            </summary>
            <param name="Timestamp">Timestamp of occurrence.</param>
            <returns>Start time of bucket to which the value was reported.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CustomGraph.Flush">
            <summary>
            Terminates the ongoing collection of data.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CustomGraph.ExportXml(System.Xml.XmlWriter,System.String)">
            <summary>
            Exports data to XML
            </summary>
            <param name="Output">XML Output</param>
            <param name="RowElement">XML Row element name.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CustomGraph.ExportGraph(System.IO.StreamWriter)">
            <summary>
            Exports the graph to a markdown output.
            </summary>
            <param name="Output">Markdown output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CustomGraph.ExportGraphScript(System.IO.StreamWriter,System.String,System.Boolean)">
            <summary>
            Exports the graph to a markdown output.
            </summary>
            <param name="Output">Markdown output</param>
            <param name="CustomColor">Optional custom color</param>
            <param name="Span">If the entire span can be included.</param>
            <returns>If script was exported.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.CustomGraph.Add(TAG.Simulator.Statistics.IFilter)">
            <summary>
            Adds a filter to the bucket.
            </summary>
            <param name="Filter">Filter</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.Graph">
            <summary>
            Abstract base class for graph nodes
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Graph.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for graph nodes
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.Graph.Header">
            <summary>
            Optional header
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Graph.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Graph.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Graph.ExportGraph(System.IO.StreamWriter)">
            <summary>
            Exports the graph to a markdown output.
            </summary>
            <param name="Output">Markdown output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Graph.ExportGraphScript(System.IO.StreamWriter,System.String,System.Boolean)">
            <summary>
            Exports the graph to a markdown output.
            </summary>
            <param name="Output">Markdown output</param>
            <param name="CustomColor">Optional custom color</param>
            <param name="Span">If the entire span can be included.</param>
            <returns>If script was exported.</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.Graphs">
            <summary>
            Container for graphs.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Graphs.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Container for graphs.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.Graphs.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Graphs.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.ICustomGraph">
            <summary>
            Interface for custom graph nodes
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.ICustomGraph.For">
            <summary>
            If the graph represents the visualization of a given entity. (Otherwise, null, or the empty string.)
            </summary>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.IGraph">
            <summary>
            Interface for graph nodes
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.IGraph.Header">
            <summary>
            Optional header
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.IGraph.ExportGraph(System.IO.StreamWriter)">
            <summary>
            Exports the graph to a markdown output.
            </summary>
            <param name="Output">Markdown output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.IGraph.ExportGraphScript(System.IO.StreamWriter,System.String,System.Boolean)">
            <summary>
            Exports the graph to a markdown output.
            </summary>
            <param name="Output">Markdown output</param>
            <param name="CustomColor">Optional custom color</param>
            <param name="Span">If the entire span can be included.</param>
            <returns>If script was exported.</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.ISource">
            <summary>
            Interface for sources
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.ISource.Reference">
            <summary>
            Reference
            </summary>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.ISourceRecipient">
            <summary>
            Interface for nodes holding a source node
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.ISourceRecipient.Register(TAG.Simulator.ObjectModel.Graphs.ISource)">
            <summary>
            Registers a source.
            </summary>
            <param name="Source">Source node</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.Plots.Plot">
            <summary>
            Abstract base class for plots
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.Plot.#ctor(TAG.Simulator.Model)">
            <summary>
            Abstract base class for plots
            </summary>
            <param name="Model">Underlying simulation model.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.Plot.GetStartTime(TAG.Simulator.Statistics.Statistic)">
            <summary>
            Gets the start time of a statistic.
            </summary>
            <param name="Record">Statistic.</param>
            <returns>Start time</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.Plot.GetStopTime(TAG.Simulator.Statistics.Statistic)">
            <summary>
            Gets the stop time of a statistic.
            </summary>
            <param name="Record">Statistic.</param>
            <returns>Stop time</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.Plot.GetMeanTime(TAG.Simulator.Statistics.Statistic)">
            <summary>
            Gets the mean time of a statistic.
            </summary>
            <param name="Record">Statistic.</param>
            <returns>Mean time</returns>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.Plots.Plot.HasGraph">
            <summary>
            If there is a plot to display.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.Plot.Add(TAG.Simulator.Statistics.Statistic)">
            <summary>
            Adds a statistic to the plot.
            </summary>
            <param name="Record">Statistic</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.Plot.Break">
            <summary>
            Breaks the graph.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.Plot.GetPlotScript">
            <summary>
            Gets the plot script
            </summary>
            <returns>Graph script.</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLine">
            <summary>
            Plots a line graph
            </summary>
        </member>
        <member name="F:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLine.graph">
            <summary>
            Graph being built.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLine.#ctor(TAG.Simulator.Model)">
            <summary>
            Plots a line graph
            </summary>
            <param name="Model">Underlying simulation model.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLine.#ctor(TAG.Simulator.Model,System.String)">
            <summary>
            Plots a line graph
            </summary>
            <param name="Model">Underlying simulation model.</param>
            <param name="Color">Color of graph.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLine.Index">
            <summary>
            Current section index.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLine.Color">
            <summary>
            Graph color.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLine.HasGraph">
            <summary>
            If there is a plot to display.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLine.Add(TAG.Simulator.Statistics.Statistic)">
            <summary>
            Adds a statistic to the plot.
            </summary>
            <param name="Record">Statistic</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLine.AddPoint(System.Double,System.Double)">
            <summary>
            Adds a point to the graph.
            </summary>
            <param name="X">X-coordinate</param>
            <param name="Y">Y-coordinate</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLine.Break">
            <summary>
            Breaks the graph.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLine.GetPlotScript">
            <summary>
            Gets the plot script
            </summary>
            <returns>Graph script.</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLineArea">
            <summary>
            Plots a line area graph
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLineArea.#ctor(TAG.Simulator.Model)">
            <summary>
            Plots a line area graph
            </summary>
            <param name="Model">Underlying simulation model.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLineArea.#ctor(TAG.Simulator.Model,System.String)">
            <summary>
            Plots a line area graph
            </summary>
            <param name="Model">Underlying simulation model.</param>
            <param name="Color">Color of graph.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLineArea.Add(TAG.Simulator.Statistics.Statistic)">
            <summary>
            Adds a statistic to the plot.
            </summary>
            <param name="Record">Statistic</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLineArea.GetPlotScript">
            <summary>
            Gets the plot script
            </summary>
            <returns>Graph script.</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLineSpan">
            <summary>
            Plots a line graph with min-max span
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLineSpan.#ctor(TAG.Simulator.Model)">
            <summary>
            Plots a line graph with min-max span
            </summary>
            <param name="Model">Underlying simulation model.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLineSpan.#ctor(TAG.Simulator.Model,System.String)">
            <summary>
            Plots a line graph with min-max span
            </summary>
            <param name="Model">Underlying simulation model.</param>
            <param name="Color">Color of graph.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLineSpan.#ctor(TAG.Simulator.Model,System.String,System.String)">
            <summary>
            Plots a line graph with min-max span
            </summary>
            <param name="Model">Underlying simulation model.</param>
            <param name="Color">Color of graph.</param>
            <param name="SpanColor">Color of spanned area.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLineSpan.Add(TAG.Simulator.Statistics.Statistic)">
            <summary>
            Adds a statistic to the plot.
            </summary>
            <param name="Record">Statistic</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLineSpan.Break">
            <summary>
            Breaks the graph.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.PlotLineSpan.GetPlotScript">
            <summary>
            Gets the plot script
            </summary>
            <returns>Graph script.</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.Plots.Series">
            <summary>
            Represents a data series.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.Series.#ctor(System.String)">
            <summary>
            Represents a data series.
            </summary>
            <param name="Name">Name of series</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.Series.Add(System.Double)">
            <summary>
            Adds a value to the series.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Plots.Series.EndSeries">
            <summary>
            Ends the series.
            </summary>
            <returns>Script representation of series.</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Graphs.Source">
            <summary>
            Graph source reference.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Source.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Graph source reference.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.Source.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Graphs.Source.Reference">
            <summary>
            Reference
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Source.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Source.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Graphs.Source.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Measurements.BucketTime">
            <summary>
            Defines the bucket time of a series.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Measurements.BucketTime.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Defines the bucket time of a series.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Measurements.BucketTime.Duration">
            <summary>
            ID of series
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Measurements.BucketTime.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Measurements.BucketTime.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Measurements.BucketTime.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Measurements.BucketTime.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Measurements.Measurements">
            <summary>
            Container for measurement configuration.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Measurements.Measurements.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Container for measurement configuration.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Measurements.Measurements.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Measurements.Measurements.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Measurements.OutlierRemoval">
            <summary>
            Removes outliers by comparing incoming samples with the average of the last samples.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Measurements.OutlierRemoval.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Removes outliers by comparing incoming samples with the average of the last samples.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Measurements.OutlierRemoval.WindowSize">
            <summary>
            Number of samples to include in the average calculation.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Measurements.OutlierRemoval.Threshold">
            <summary>
            Threshold for outlier detection.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Measurements.OutlierRemoval.Smooth">
            <summary>
            If the average value should be used to also smooth the output.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Measurements.OutlierRemoval.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Measurements.OutlierRemoval.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Measurements.OutlierRemoval.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Measurements.OutlierRemoval.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Measurements.OutlierRemoval.Append(TAG.Simulator.Statistics.IFilter)">
            <summary>
            Appends a filter to the current filter.
            </summary>
            <param name="Filter">Filter to append.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Measurements.OutlierRemoval.Filter(System.DateTime@,System.Double@)">
            <summary>
            Filters a value
            </summary>
            <param name="Timestamp">Timestamp of value</param>
            <param name="Value">Value</param>
            <returns>If value should be discarded</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Measurements.SeriesReference">
            <summary>
            Abstract base class for series references nodes.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Measurements.SeriesReference.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for series references nodes.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Measurements.SeriesReference.For">
            <summary>
            ID of series
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Measurements.SeriesReference.Bucket">
            <summary>
            Referenced bucket.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Measurements.SeriesReference.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Measurements.SeriesReference.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.MetaData.Description">
            <summary>
            Description of model
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Description.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Description of model
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.Description.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.Description.DescriptionString">
            <summary>
            Description string
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Description.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Description.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Description.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Description.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.MetaData.Introduction">
            <summary>
            Introduction to model
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Introduction.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Description of model
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.Introduction.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.Introduction.DescriptionString">
            <summary>
            Description string
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Introduction.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Introduction.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Introduction.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Introduction.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.MetaData.Meta">
            <summary>
            Node that contains meta-data about the model.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Meta.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Node that contains meta-data about the model.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.Meta.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Meta.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Meta.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Meta.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.MetaData.ModelScript">
            <summary>
            Executes model script, allowing for definitions that will be available across events.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.ModelScript.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Executes model script, allowing for definitions that will be available across events.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.ModelScript.Script">
            <summary>
            Script string
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.ModelScript.Expression">
            <summary>
            Parsed expression
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.ModelScript.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.ModelScript.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.ModelScript.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.ModelScript.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.MetaData.Preparation">
            <summary>
            Preparation of model
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Preparation.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Description of model
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.Preparation.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.Preparation.DescriptionString">
            <summary>
            Description string
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Preparation.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Preparation.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Preparation.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Preparation.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.MetaData.Title">
            <summary>
            Title of model
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Title.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Title of model
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.Title.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.MetaData.Title.TitleString">
            <summary>
            Title string
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Title.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Title.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Title.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.MetaData.Title.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.SimulationNode">
            <summary>
            Abstract base class for simulation nodes
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for simulation nodes
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.SimulationNode.Parent">
            <summary>
            Parent node in the simulation model.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.SimulationNode.Model">
            <summary>
            Model in which the node is defined.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.SimulationNode.Namespace">
            <summary>
            XML Namespace where the element is defined.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.SimulationNode.SchemaResource">
            <summary>
            Points to the embedded XML Schema resource defining the semantics of the XML namespace.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.SimulationNode.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.ForEach(TAG.Simulator.ForEachCallbackMethod,System.Boolean)">
            <summary>
            Evaluates <paramref name="Method"/> on each node in the subtree defined by the current node.
            </summary>
            <param name="Method">Method to call.</param>
            <param name="DepthFirst">If children are iterated before parents.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.Start">
            <summary>
            Starts the node.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.Finalize">
            <summary>
            Finalizes the node after simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNode.Indent(System.IO.StreamWriter,System.Int32)">
            <summary>
            Adds indentation to the current row.
            </summary>
            <param name="Output">Output.</param>
            <param name="Indentation">Number of tabs to indent.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.SimulationNodeChildren">
            <summary>
            Abstract base class for simulation nodes with children
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNodeChildren.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for simulation nodes
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.SimulationNodeChildren.Children">
            <summary>
            Child nodes.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNodeChildren.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNodeChildren.AddChild(TAG.Simulator.ISimulationNode)">
            <summary>
            Adds a child node.
            </summary>
            <param name="Child">Child Node</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.SimulationNodeChildren.ParseChildren">
            <summary>
            If children are to be parsed by <see cref="M:TAG.Simulator.ObjectModel.SimulationNodeChildren.FromXml(System.Xml.XmlElement)"/>
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNodeChildren.ForEach(TAG.Simulator.ForEachCallbackMethod,System.Boolean)">
            <summary>
            Evaluates <paramref name="Method"/> on each node in the subtree defined by the current node.
            </summary>
            <param name="Method">Method to call.</param>
            <param name="DepthFirst">If children are iterated before parents.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNodeChildren.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.SimulationNodeChildren.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Structure.Assemblies">
            <summary>
            Container for assemblies.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Structure.Assemblies.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Container for assemblies.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Structure.Assemblies.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Structure.Assemblies.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Structure.Assembly">
            <summary>
            Assembly reference.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Structure.Assembly.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Assembly reference.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Structure.Assembly.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Structure.Assembly.FileName">
            <summary>
            Filename of assembly.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Structure.Assembly.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Structure.Assembly.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.Binary">
            <summary>
            Binary value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Binary.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Binary value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Binary.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Binary.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Binary.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Binary.Children">
            <summary>
            Child nodes.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Binary.ForEach(TAG.Simulator.ForEachCallbackMethod,System.Boolean)">
            <summary>
            Evaluates <paramref name="Method"/> on each node in the subtree defined by the current node.
            </summary>
            <param name="Method">Method to call.</param>
            <param name="DepthFirst">If children are iterated before parents.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Binary.ExportMarkdown(System.IO.StreamWriter)">
            <summary>
            Exports Markdown
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Binary.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports XML
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Binary.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Binary.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.Byte">
            <summary>
            Byte value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Byte.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Byte value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.BinaryElements.Byte.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Byte.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Byte.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Byte.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.Char">
            <summary>
            Char value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Char.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Char value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.BinaryElements.Char.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Char.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Char.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Char.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.Double">
            <summary>
            Double value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Double.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Double value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.BinaryElements.Double.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Double.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Double.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Double.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.IBinaryElement">
            <summary>
            Interface for binary elements
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.IBinaryElement.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.Int16">
            <summary>
            Int16 value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int16.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Int16 value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.BinaryElements.Int16.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int16.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int16.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int16.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.Int24">
            <summary>
            Int24 value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int24.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Int24 value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.BinaryElements.Int24.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int24.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int24.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int24.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.Int32">
            <summary>
            Int32 value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int32.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Int32 value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.BinaryElements.Int32.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int32.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int32.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int32.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.Int48">
            <summary>
            Int48 value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int48.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Int48 value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.BinaryElements.Int48.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int48.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int48.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int48.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.Int64">
            <summary>
            Int64 value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int64.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Int64 value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.BinaryElements.Int64.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int64.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int64.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Int64.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.SByte">
            <summary>
            SByte value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.SByte.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            SByte value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.BinaryElements.SByte.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.SByte.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.SByte.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.SByte.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.Single">
            <summary>
            Single value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Single.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Single value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.BinaryElements.Single.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Single.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Single.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Single.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt16">
            <summary>
            UInt16 value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt16.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            UInt16 value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt16.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt16.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt16.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt16.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt24">
            <summary>
            UInt24 value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt24.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            UInt24 value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt24.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt24.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt24.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt24.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt32">
            <summary>
            UInt32 value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt32.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            UInt32 value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt32.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt32.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt32.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt32.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt48">
            <summary>
            UInt48 value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt48.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            UInt48 value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt48.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt48.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt48.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt48.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt64">
            <summary>
            UInt64 value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt64.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            UInt64 value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt64.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt64.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt64.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.UInt64.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.BinaryElements.Utf8String">
            <summary>
            Utf8String value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Utf8String.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Utf8String value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.BinaryElements.Utf8String.LocalName">
            <summary>
            Local name of Binary element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Utf8String.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Utf8String.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with Binary definition.
            </summary>
            <param name="Definition">Binary definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.BinaryElements.Utf8String.Append(System.IO.MemoryStream,Waher.Script.Variables)">
            <summary>
            Appends the binary element to the output stream.
            </summary>
            <param name="Output">Output stream.</param>
            <param name="Variables">Set of variables for the activity.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.DateTime">
            <summary>
            DateTime value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.DateTime.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            DateTime value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.DateTime.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model,System.DateTime)">
            <summary>
            DateTime value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <param name="Value">Value.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.DateTime.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.DateTime.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.DateTime.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.DateTime.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.DateTime.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.DateTime.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.Duration">
            <summary>
            Duration value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Duration.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Duration value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Duration.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model,Waher.Content.Duration)">
            <summary>
            Duration value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <param name="Value">Value</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Duration.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Duration.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Duration.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Duration.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Duration.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Duration.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Duration.ExportText(Waher.Content.Duration,System.IO.StreamWriter)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Duration">Duration value.</param>
            <param name="Output">Output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Duration.ExportText(Waher.Content.Duration,System.Text.StringBuilder)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Duration">Duration value.</param>
            <param name="Output">Output</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Duration.ToString(Waher.Content.Duration)">
            <summary>
            Converts a duration to a string.
            </summary>
            <param name="Duration">Duration</param>
            <returns>String representation of duration.</returns>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.IValue">
            <summary>
            Interface for values
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.IValue.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.IValue.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.IValueRecipient">
            <summary>
            Interface for nodes holding a value node
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.IValueRecipient.Register(TAG.Simulator.ObjectModel.Values.IValue)">
            <summary>
            Registers a value for the argument.
            </summary>
            <param name="Value">Value node</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.Json">
            <summary>
            JSON value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Json.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            JSON value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Json.LocalName">
            <summary>
            Local name of JSON element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Json.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Json.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with JSON definition.
            </summary>
            <param name="Definition">JSON definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Json.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Json.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.Number">
            <summary>
            Number value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Number.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Number value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Number.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model,System.Double)">
            <summary>
            Number value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <param name="Value">Value</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Number.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Number.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Number.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Number.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Number.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Number.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.Script">
            <summary>
            Value defined by script.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Script.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Value defined by script.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Script.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model,Waher.Script.Expression)">
            <summary>
            Value defined by script.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <param name="Script">Script expression</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Script.ScriptString">
            <summary>
            Script string
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Script.Expression">
            <summary>
            Parsed expression
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Script.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Script.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Script.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Script.RemoveIndent(System.String)">
            <summary>
            Removes indentation from a block of text.
            </summary>
            <param name="Text">Text</param>
            <returns>Unindented text</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Script.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Script.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.String">
            <summary>
            String value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.String.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            String value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.String.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model,System.String)">
            <summary>
            String value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <param name="Value">Value</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.String.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.String.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.String.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.String.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.String.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.String.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.Time">
            <summary>
            Time value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Time.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Time value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Time.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model,System.TimeSpan)">
            <summary>
            Time value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
            <param name="Value">Value</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Time.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Time.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Time.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Time.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Time.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Time.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.Value">
            <summary>
            Abstract base class for values
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Value.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Abstract base class for values
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Value.Initialize">
            <summary>
            Initialized the node before simulation.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Value.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Value.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.Variable">
            <summary>
            Value defined by variable.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Variable.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Value defined by variable.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Variable.Name">
            <summary>
            Variable name
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Variable.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Variable.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Variable.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Variable.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Variable.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.ObjectModel.Values.Xml">
            <summary>
            XML value.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Xml.#ctor(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            XML value.
            </summary>
            <param name="Parent">Parent node</param>
            <param name="Model">Model in which the node is defined.</param>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Xml.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Xml.RootName">
            <summary>
            Root name
            </summary>
        </member>
        <member name="P:TAG.Simulator.ObjectModel.Values.Xml.LocalName">
            <summary>
            Local name of XML element defining contents of class.
            </summary>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Xml.Create(TAG.Simulator.ISimulationNode,TAG.Simulator.Model)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Parent">Parent node.</param>
            <param name="Model">Model in which the node is defined.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Xml.FromXml(System.Xml.XmlElement)">
            <summary>
            Sets properties and attributes of class in accordance with XML definition.
            </summary>
            <param name="Definition">XML definition</param>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Xml.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the value.
            </summary>
            <param name="Variables">Set of variables for the activity.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:TAG.Simulator.ObjectModel.Values.Xml.ExportPlantUml(System.IO.StreamWriter,System.Int32,System.Char)">
            <summary>
            Exports PlantUML
            </summary>
            <param name="Output">Output</param>
            <param name="Indentation">Number of tabs to indent.</param>
            <param name="QuoteChar">Quote character.</param>
        </member>
        <member name="T:TAG.Simulator.Statistics.Bucket">
            <summary>
            Statistical bucket
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.#ctor(System.String,System.String,System.String,TAG.Simulator.Model,System.Boolean,System.DateTime,Waher.Content.Duration)">
            <summary>
            Statistical bucket
            </summary>
            <param name="Id">ID of bucket.</param>
            <param name="Title">Title of bucket</param>
            <param name="LabelY">Y-label of bucket.</param>
            <param name="Model">Simulation model.</param>
            <param name="CalcStdDev">If standard deviation is to be calculated.</param>
            <param name="StartTime">Starting time</param>
            <param name="BucketTime">Duration of one bucket, where statistics is collected.</param>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.Id">
            <summary>
            Bucket ID
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.Header">
            <summary>
            Optional header
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.BucketTime">
            <summary>
            Time to accumulate values.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.Count">
            <summary>
            Counter
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.TotalCount">
            <summary>
            Total Counter
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.Sum">
            <summary>
            Sum of samples.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.Min">
            <summary>
            Smallest sample
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.Max">
            <summary>
            Largest sample
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.Mean">
            <summary>
            Mean (average) value of samples.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.Inc">
            <summary>
            Increments counter.
            </summary>
            <returns>Start time of bucket that was incremented.</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.Dec">
            <summary>
            Decrements counter.
            </summary>
            <returns>Start time of bucket that was incremented.</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.Sample(System.DateTime,Waher.Script.Objects.PhysicalQuantity)">
            <summary>
            Adds a sample
            </summary>
            <param name="Timestamp">Timestamp of value.</param>
            <param name="Value">Sample value reported</param>
            <returns>Start time of bucket to which the value was reported.</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.Sample(System.DateTime,System.Double)">
            <summary>
            Adds a sample
            </summary>
            <param name="Timestamp">Timestamp of value.</param>
            <param name="Value">Sample value reported</param>
            <returns>Start time of bucket to which the value was reported.</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.CountOccurrence(System.DateTime)">
            <summary>
            Counts one occurrence
            </summary>
            <param name="Timestamp">Timestamp of occurrence.</param>
            <returns>Start time of bucket to which the value was reported.</returns>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.Variance">
            <summary>
            Variance of samples
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Bucket.StdDev">
            <summary>
            (Biased) standard deviation of samples
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.Flush">
            <summary>
            Terminates the ongoing collection of data.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.GetEnumerator">
            <summary>
            Gets an enumerator for recorded statistics.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for recorded statistics.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.ExportGraph(System.IO.StreamWriter)">
            <summary>
            Exports the graph to a markdown output.
            </summary>
            <param name="Output">Markdown output</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.ExportGraphScript(System.IO.StreamWriter,System.String,System.Boolean)">
            <summary>
            Exports the graph to a markdown output.
            </summary>
            <param name="Output">Markdown output</param>
            <param name="CustomColor">Optional custom color</param>
            <param name="Span">If the entire span can be included.</param>
            <returns>If script was exported.</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.ExportXml(System.Xml.XmlWriter,System.String)">
            <summary>
            Exports data to XML
            </summary>
            <param name="Output">XML Output</param>
            <param name="RowElement">XML Row element name.</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Bucket.Add(TAG.Simulator.Statistics.IFilter)">
            <summary>
            Adds a filter to the bucket.
            </summary>
            <param name="Filter">Filter</param>
        </member>
        <member name="T:TAG.Simulator.Statistics.Buckets">
            <summary>
            A collection of buckets
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.#ctor(System.DateTime,Waher.Content.Duration,System.String,System.String,TAG.Simulator.Model)">
            <summary>
            A collection of buckets
            </summary>
            <param name="StartTime">Starting time</param>
            <param name="BucketTime">Duration of one bucket, where statistics is collected.</param>
            <param name="Title">Title of buckets. %ID% will be replaced by the ID of each bucket.</param>
            <param name="LabelY">Y-label of buckets. %ID% will be replaced by the ID of each bucket.</param>
            <param name="Model">Simulation model.</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.#ctor(System.DateTime,Waher.Content.Duration,System.String,System.String,TAG.Simulator.Model,System.Boolean,System.String[])">
            <summary>
            A collection of buckets
            </summary>
            <param name="StartTime">Starting time</param>
            <param name="BucketTime">Duration of one bucket, where statistics is collected.</param>
            <param name="Title">Title of buckets. %ID% will be replaced by the ID of each bucket.</param>
            <param name="LabelY">Y-label of buckets. %ID% will be replaced by the ID of each bucket.</param>
            <param name="Model">Simulation model.</param>
            <param name="CalcStdDev">If standard deviation is to be calculated.</param>
            <param name="IDs">Predefined IDs</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.#ctor(System.DateTime,Waher.Content.Duration,System.String,System.String,TAG.Simulator.Model,TAG.Simulator.Statistics.IBucket[])">
            <summary>
            A collection of buckets
            </summary>
            <param name="StartTime">Starting time</param>
            <param name="BucketTime">Duration of one bucket, where statistics is collected.</param>
            <param name="Title">Title of buckets. %ID% will be replaced by the ID of each bucket.</param>
            <param name="LabelY">Y-label of buckets. %ID% will be replaced by the ID of each bucket.</param>
            <param name="Model">Simulation model.</param>
            <param name="Buckets">Predefined buckets.</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.CountEvent(System.String)">
            <summary>
            Counts an event.
            </summary>
            <param name="Counter">Counter ID</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.IncrementCounter(System.String)">
            <summary>
            Increments a counter.
            </summary>
            <param name="Counter">Counter ID</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.DecrementCounter(System.String)">
            <summary>
            Decrements a counter.
            </summary>
            <param name="Counter">Counter ID</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.Sample(System.String,System.Double)">
            <summary>
            Samples a value
            </summary>
            <param name="Counter">Counter ID</param>
            <param name="Value">Value</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.Sample(System.String,Waher.Script.Objects.PhysicalQuantity)">
            <summary>
            Samples a value
            </summary>
            <param name="Counter">Counter ID</param>
            <param name="Value">Value</param>
        </member>
        <member name="P:TAG.Simulator.Statistics.Buckets.Count">
            <summary>
            Number of counters
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.GetTotalCountTable(System.String[])">
            <summary>
            Gets a count table of registered counters.
            </summary>
            <param name="Order">Optional sort order of records.</param>
            <returns>Count table</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.ExportXml(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Exports data to XML
            </summary>
            <param name="Output">XML Output</param>
            <param name="TableElement">XML Table element name.</param>
            <param name="RowElement">XML Row element name.</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.TryGetBucket(System.String,TAG.Simulator.Statistics.IBucket@)">
            <summary>
            Tries to get a bucket, given its ID.
            </summary>
            <param name="Id">Bucket ID</param>
            <param name="Bucket">Bucket, if found.</param>
            <returns>If a bucket was found.</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.GetSampleBucket(System.String)">
            <summary>
            Gets a sample bucket.
            </summary>
            <param name="Id">Bucket ID</param>
            <returns>Bucket.</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.GetCountBucket(System.String)">
            <summary>
            Gets a count bucket.
            </summary>
            <param name="Id">Bucket ID</param>
            <returns>Bucket.</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.Register(TAG.Simulator.Statistics.IBucket)">
            <summary>
            Registers a custom bucket.
            </summary>
            <param name="Bucket">Bucket</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Buckets.ExportCountHistoryGraph(System.String,System.Collections.Generic.IEnumerable{System.String},System.IO.StreamWriter,TAG.Simulator.Model,System.Collections.Generic.IEnumerable{TAG.Simulator.ObjectModel.Events.IEvent},SkiaSharp.SKColor[])">
            <summary>
            Exports historical counts as a graph.
            </summary>
            <param name="Title">Title of graph.</param>
            <param name="Order">Preferred order, can be null.</param>
            <param name="Output">Export destination</param>
            <param name="Model">Simulation model</param>
            <param name="Events">Associated event objects.</param>
            <param name="Palette">Optional predefined palette</param>
        </member>
        <member name="P:TAG.Simulator.Statistics.Buckets.IDs">
            <summary>
            Sample IDs
            </summary>
        </member>
        <member name="T:TAG.Simulator.Statistics.CountTable">
            <summary>
            Represents a simple count table
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.CountTable.#ctor">
            <summary>
            Represents a simple count table
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.CountTable.Add(System.String,System.Int64)">
            <summary>
            Adds a record to the table.
            </summary>
            <param name="Id">Count ID</param>
            <param name="Count">Count</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.CountTable.SetFgColor(System.String,System.String)">
            <summary>
            Sets the foreground color for a record.
            </summary>
            <param name="Id">Record ID</param>
            <param name="Color">String representation of color</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.CountTable.SetBgColor(System.String,System.String)">
            <summary>
            Sets the background color for a record.
            </summary>
            <param name="Id">Record ID</param>
            <param name="Color">String representation of color</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.CountTable.ExportTableMarkdown(System.IO.StreamWriter,System.String,System.String,System.String)">
            <summary>
            Exports data as a Markdown Table
            </summary>
            <param name="Output">Output</param>
            <param name="Header">Header string</param>
            <param name="Title">Title string</param>
            <param name="Id">Table ID</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.CountTable.ExportTableGraph(System.IO.StreamWriter,System.String)">
            <summary>
            Exports data as a graph embedded in markdown
            </summary>
            <param name="Output">Markdown output</param>
            <param name="Title">Title string</param>
        </member>
        <member name="T:TAG.Simulator.Statistics.EventStatistics">
            <summary>
            Basic event statistics
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.EventStatistics.#ctor(System.DateTime,Waher.Content.Duration,TAG.Simulator.Model)">
            <summary>
            Basic event statistics
            </summary>
            <param name="StartTime">Starting time</param>
            <param name="BucketTime">Duration of one bucket, where statistics is collected.</param>
            <param name="Model">Simulation Model.</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.EventStatistics.Queue(Waher.Events.Event)">
            <summary>
            Processes an event.
            </summary>
            <param name="Event">Event</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.EventStatistics.ExportMarkdown(System.IO.StreamWriter,TAG.Simulator.Model)">
            <summary>
            Exports accumulated statistics to markdown
            </summary>
            <param name="Output">Markdown output</param>
            <param name="Model">Simulation model</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.EventStatistics.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports accumulated statistics to XML
            </summary>
            <param name="Output">XML output</param>
        </member>
        <member name="T:TAG.Simulator.Statistics.IBucket">
            <summary>
            Interface for buckets.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.IBucket.Id">
            <summary>
            Bucket ID
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.IBucket.TotalCount">
            <summary>
            Total Counter
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.IBucket.BucketTime">
            <summary>
            Time to accumulate values.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.IBucket.Inc">
            <summary>
            Increments counter.
            </summary>
            <returns>Start time of bucket that was incremented.</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.IBucket.Dec">
            <summary>
            Decrements counter.
            </summary>
            <returns>Start time of bucket that was incremented.</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.IBucket.Sample(System.DateTime,Waher.Script.Objects.PhysicalQuantity)">
            <summary>
            Adds a sample
            </summary>
            <param name="Timestamp">Timestamp of value.</param>
            <param name="Value">Sample value reported</param>
            <returns>Start time of bucket to which the value was reported.</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.IBucket.Sample(System.DateTime,System.Double)">
            <summary>
            Adds a sample
            </summary>
            <param name="Timestamp">Timestamp of value.</param>
            <param name="Value">Sample value reported</param>
            <returns>Start time of bucket to which the value was reported.</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.IBucket.CountOccurrence(System.DateTime)">
            <summary>
            Counts one occurrence
            </summary>
            <param name="Timestamp">Timestamp of occurrence.</param>
            <returns>Start time of bucket to which the value was reported.</returns>
        </member>
        <member name="M:TAG.Simulator.Statistics.IBucket.Flush">
            <summary>
            Terminates the ongoing collection of data.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.IBucket.ExportXml(System.Xml.XmlWriter,System.String)">
            <summary>
            Exports data to XML
            </summary>
            <param name="Output">XML Output</param>
            <param name="RowElement">XML Row element name.</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.IBucket.Add(TAG.Simulator.Statistics.IFilter)">
            <summary>
            Adds a filter to the bucket.
            </summary>
            <param name="Filter">Filter</param>
        </member>
        <member name="T:TAG.Simulator.Statistics.IFilter">
            <summary>
            Interface for sample filters
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.IFilter.Append(TAG.Simulator.Statistics.IFilter)">
            <summary>
            Appends a filter to the current filter.
            </summary>
            <param name="Filter">Filter to append.</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.IFilter.Filter(System.DateTime@,System.Double@)">
            <summary>
            Filters a value
            </summary>
            <param name="Timestamp">Timestamp of value</param>
            <param name="Value">Value</param>
            <returns>If value should be discarded</returns>
        </member>
        <member name="T:TAG.Simulator.Statistics.IPeriodBucket">
            <summary>
            Statistical bucket with periods
            </summary>
        </member>
        <member name="T:TAG.Simulator.Statistics.Statistic">
            <summary>
            Represents collected statistical information from a small portion of time.
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.Statistic.#ctor(System.DateTime,System.DateTime,System.Int64,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Represents collected statistical information from a small portion of time.
            </summary>
            <param name="Start">Start of period.</param>
            <param name="Stop">End of period.</param>
            <param name="Count">Number of events</param>
            <param name="Mean">Mean value</param>
            <param name="Variance">Variance of values</param>
            <param name="StdDev">Standard deviation of values</param>
            <param name="Min">Smallest value</param>
            <param name="Max">Largest value</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Statistic.#ctor(System.DateTime,System.DateTime,System.Int64,System.Double,System.Double,System.Double)">
            <summary>
            Represents collected statistical information from a small portion of time.
            </summary>
            <param name="Start">Start of period.</param>
            <param name="Stop">End of period.</param>
            <param name="Count">Number of events</param>
            <param name="Mean">Mean value</param>
            <param name="Min">Smallest value</param>
            <param name="Max">Largest value</param>
        </member>
        <member name="M:TAG.Simulator.Statistics.Statistic.#ctor(System.DateTime,System.DateTime,System.Int64)">
            <summary>
            Represents collected statistical information from a small portion of time.
            </summary>
            <param name="Start">Start of period.</param>
            <param name="Stop">End of period.</param>
            <param name="Count">Number of events</param>
        </member>
        <member name="P:TAG.Simulator.Statistics.Statistic.Start">
            <summary>
            Start of period.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Statistic.Stop">
            <summary>
            End of period.
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Statistic.Count">
            <summary>
            Number of events
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Statistic.Mean">
            <summary>
            Mean value
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Statistic.Variance">
            <summary>
            Variance of values
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Statistic.StdDev">
            <summary>
            Standard deviation of values
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Statistic.Min">
            <summary>
            Smallest value
            </summary>
        </member>
        <member name="P:TAG.Simulator.Statistics.Statistic.Max">
            <summary>
            Largest value
            </summary>
        </member>
        <member name="M:TAG.Simulator.Statistics.Statistic.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports data to XML
            </summary>
            <param name="Output">XML Output</param>
        </member>
    </members>
</doc>
